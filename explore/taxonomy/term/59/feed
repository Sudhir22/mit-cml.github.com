<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="http://explore.appinventor.mit.edu"  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
 <title>Explore MIT App Inventor - App Inventor 1</title>
 <link>http://explore.appinventor.mit.edu/tutorial-version/app-inventor-1</link>
 <description></description>
 <language>en</language>
<item>
 <title>Get the Gold</title>
 <link>http://explore.appinventor.mit.edu/get-gold</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

.ButtonText {
color:green;
font-weight: bold;
}

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;

}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

.controlblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FAEDBB;
font-size: 9pt;
text-wrap: suppress;
}

.listblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FCF5D7;
font-size: 9pt;
text-wrap: suppress;
}


/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;h4 class=&quot;ai-header&quot;&gt;What You&#039;re Building&lt;/h4&gt;
&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;p&gt;
&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/GetTheGoldMain.png&quot; style=&quot;float:right; height: 453px; width: 197px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt; By building the &lt;span style=&quot;color:green;&quot;&gt;Get The Gold App&lt;/span&gt; you will get practice with setting visibility, using Clock components and Timers, and detecting collisions in App Inventor. You&#039;ll program an application that has a pirate ship whose goal is to collect all the gold on the screen.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;Connect to the App Inventor web site and start a new project. Name it &lt;span style=&quot;color:green;&quot;&gt;GetTheGold&lt;/span&gt;, and also set the screen&#039;s &lt;strong style=&quot;color:green;&quot;&gt;Title&lt;/strong&gt; to &quot;GetTheGold&quot;. Open the Blocks Editor and connect to a device or emulator.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This tutorial introduces the following skills, useful for future game development:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Using the Clock component&lt;/li&gt;
&lt;li&gt;Using Clock.Timer to move sprites&lt;/li&gt;
&lt;li&gt;Using Sprite.Flung to move a sprite &lt;/li&gt;
&lt;li&gt;Using collision detection&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Getting Ready&lt;/h4&gt;
&lt;p&gt;For this game, you will have two types of imagesprites: pirate and gold coin. Click below to download the image file for your sprites.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/pirateship.jpeg&quot;&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/pirateship.jpeg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/goldcoin.jpeg&quot;&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/goldcoin.jpeg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Set up the Components&lt;/h4&gt;
&lt;p&gt;Use the component designer to create the interface for &lt;span style=&quot;color:green;&quot;&gt;GetTheGold&lt;/span&gt;. When you finish, it should look something like the snapshot below (more detailed instructions below the snapshot).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/GetTheGoldDesigner.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To create this interface, put the following components into the Designer by dragging them from the Component Palette into the Viewer.&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Component Type
&lt;/td&gt;
&lt;td&gt;
Palette Group
&lt;/td&gt;
&lt;td&gt;
What you&#039;ll name it
&lt;/td&gt;
&lt;td&gt;
Purpose of Component
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Canvas&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;Canvas1&lt;/td&gt;
&lt;td&gt;The background that we will be putting our imagesprites on&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ImageSprite&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Animation&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;PirateSprite&lt;/td&gt;
&lt;td&gt;The pirate ship in our game&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ImageSprite&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Animation&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ImageSprite2&lt;/td&gt;
&lt;td&gt;One of the gold coins in the game&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ImageSprite&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Animation&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ImageSprite3&lt;/td&gt;
&lt;td&gt;One of the gold coins in the game&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ImageSprite&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Animation&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ImageSprite4&lt;/td&gt;
&lt;td&gt;One of the gold coins in the game&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ImageSprite&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Animation&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ImageSprite5&lt;/td&gt;
&lt;td&gt;One of the gold coins in the game&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ImageSprite&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Animation&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ImageSprite6&lt;/td&gt;
&lt;td&gt;One of the gold coins in the game&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Clock&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;Clock1&lt;/td&gt;
&lt;td&gt;We use the Clock for its Timer method to move the coins&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Button&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ResetButton&lt;/td&gt;
&lt;td&gt;To reset the game so the player can play again&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Set the properties of the components as described below:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;&lt;strong&gt;Component&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;color:green;&quot;&gt;ResetButton&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;
Change &lt;span class=&quot;ButtonText&quot;&gt;Text&lt;/span&gt; property to &quot;Reset&quot;.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;color:green;&quot;&gt;PirateSprite&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;
Change &lt;span class=&quot;ButtonText&quot;&gt;Speed&lt;/span&gt; property to 6.
&lt;/td&gt;
&lt;td&gt;
Upload the pirateship image and set &lt;span class=&quot;ButtonText&quot;&gt;Picture&lt;/span&gt; property to pirateship.
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;color:green;&quot;&gt;ImageSprite(2,3,4,5,6)&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;
Upload the goldcoin image and set &lt;span class=&quot;ButtonText&quot;&gt;Picture&lt;/span&gt; property to goldcoin.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span style=&quot;color:green;&quot;&gt;Clock&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;
Change &lt;span class=&quot;ButtonText&quot;&gt;TimerInterval&lt;/span&gt; property to 2000.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Moving the Pirate&lt;/h4&gt;
&lt;p&gt; To move the PirateSprite, we want the user to be able to &quot;fling&quot; the sprite in the direction that they choose. To do this, we will use the &lt;span class=&quot;basicblock&quot;&gt;PirateSprite.Flung&lt;/span&gt; event handler. &lt;/p&gt;
&lt;p&gt; You may notice that &lt;span class=&quot;basicblock&quot;&gt;PirateSprite.Flung&lt;/span&gt; takes in 6 attributes: x, y, xvel, yvel, speed, and heading. We want to reassign PirateSprite&#039;s current heading to the heading given to us from PirateSprite.Flung. This means that the user can now control the direction of the pirate ship with their fingers by flinging on the screen. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/PirateSpriteFlung.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To prevent the pirate from moving off the screen, we will also use PirateSprite.Bounce when an edge is reached. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/PirateSpriteBounce.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Moving the Coins&lt;/h4&gt;
&lt;p&gt; We want the coins to move to random positions on the screen. We will use &lt;span class=&quot;basicblock&quot;&gt;Clock1.Timer &lt;/span&gt; and the ImageSprite&#039;s MoveTo method to do this. &lt;/p&gt;
&lt;p&gt; When the Clock1.Timer goes off, we want all of our gold coin ImageSprites to move to a new random location on the Canvas. We will do this by using the &lt;span class=&quot;basicblock&quot;&gt;Sprite.MoveTo&lt;/span&gt; block. &lt;/p&gt;
&lt;p&gt;MoveTo takes in two arguments: the x and y coordinates on the canvas of the new position we want the sprite to move to. We want the Sprite to move to a new &lt;i&gt;random&lt;/i&gt; location so we will use the &lt;span class=&quot;basicblock&quot;&gt;random integer&lt;/span&gt; block found in the Math box. Since we want each Gold ImageSprite to move to a new location, we repeat this process for each sprite&#039;s MoveTo function. &lt;/p&gt;
&lt;p&gt;For ImageSprite2, we want x to be a random integer from 0 to &lt;i&gt;Canvas1.Width-ImageSprite2.Width&lt;/i&gt; and y to be a random integer from 0 to &lt;i&gt;Canvas1.Height-ImageSprite2.Height&lt;/i&gt;. This is to be repeated for all the Gold Image Sprites.&lt;/p&gt;
&lt;p&gt;Remember that sprites are measured at the upper left corner as (0,0) so if we don&#039;t want them to go off the screen, we need to take the sprite&#039;s height/width into account when setting the range for our random numbers.&lt;/p&gt;
&lt;p&gt;We will do this by setting up our blocks as in the image below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/ClockTimer.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Detecting Collisions&lt;/h4&gt;
&lt;p&gt; App Inventor detects collisions by checking for an intersection between the bounding rectangles of each ImageSprite. We call this rectangle-based collision detection. As you can see in the image below, sprites with circular or polygon shape will appear to collide because of the rectangular bounds around them when they might not actually be colliding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/CollisionDetection.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can use the &lt;span class=&quot;basicblock&quot;&gt;PirateSprite.CollidedWith &lt;/span&gt; event handler to detect whenever the pirate ship collides with another sprite or gold coin. You may notice that &lt;span class=&quot;basicblock&quot;&gt;PirateSprite.CollidedWith &lt;/span&gt; takes in an argument. This argument is the object that PirateSprite just collided with. We will be testing inside the handler for which object so the name of this argument is not significant. You can name it other. &lt;/p&gt;
&lt;p&gt;Whenever the pirate collides with a gold coin, we want the coin to disappear. We can do this by setting the coin&#039;s visibility to false. To find which coin the pirate collided with, we will use the &lt;span class=&quot;basicblock&quot;&gt;PirateSprite.CollidingWith&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt; We can use &lt;span class=&quot;basicblock&quot;&gt;PirateSprite.CollidingWith&lt;/span&gt; to take in a component (each of the gold coin sprites) to detect which sprite was hit. This is a component block and NOT a text block with the words ImageSprite inside. The component block can be found in the drawer for each component. If a sprite was hit, we will set its visibility to false. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/CollisionSprites.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Reset Button&lt;/h4&gt;
&lt;p&gt;After the user hits all of the gold sprites with the pirate ship, none of them will be visible. The reset button should set all of the gold sprites&#039; visibility to true. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/ResetVis.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Complete Program&lt;/h4&gt;
&lt;p&gt;Here&#039;s the complete &lt;strong&gt;&lt;span style=&quot;color:green;&quot;&gt;GetTheGold&lt;/span&gt;&lt;/strong&gt; program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/GetTheGoldAll.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Package the final version of the app by choosing &lt;strong&gt;Package For Phone | Barcode&lt;/strong&gt; from the Component Designer menu. When the barcode appears, use the barcode scanner on your phone to download and install the app.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Variations&lt;/h4&gt;
&lt;p&gt;Once you get this program running, you may want to do the following additional features to extend it. For example,&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Create a label to display the time that it took you to get all the gold&lt;/li&gt;
&lt;li&gt;Change the speed of the ship or gold coins&lt;/li&gt;
&lt;li&gt;Add an enemy sprite that when collided with, causes your pirate to lose speed&lt;/li&gt;
&lt;li&gt;Use one of the phone&#039;s sensors to control movement of the pirate ship &lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app.
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/GetTheGoldBarcode.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to work with this sample in App Inventor, download the &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/Teach/GetTheGold/GetTheGold.zip&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, go to the My Projects page, and choose &lt;b&gt;More Actions | Upload Source&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;Done with &lt;span style=&quot;color:black;&quot;&gt;GetTheGold&lt;/span&gt;? Return to to the other modules &lt;a href=&quot;/teach/module-2-2&quot;&gt;here&lt;/a&gt; or the  tutorials &lt;a href=&quot;/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Sprites&lt;/li&gt;&lt;li class=&quot;field-item odd&quot;&gt;Clock Timer&lt;/li&gt;&lt;li class=&quot;field-item even&quot;&gt;Game&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 28 Jun 2013 21:35:19 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">346 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>MoleMash 2</title>
 <link>http://explore.appinventor.mit.edu/content/molemash-2</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;
	
}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

.controlblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FAEDBB;
font-size: 9pt;
text-wrap: suppress;
}

.listblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FCF5D7;
font-size: 9pt;
text-wrap: suppress;
}


/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;h4 class=&quot;ai-header&quot;&gt;What You&#039;re Building&lt;/h4&gt;
&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;p&gt;
&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/front-pic.png&quot; style=&quot;float:right;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cs.usfca.edu/~wolber/appinventor/bookSplits/ch3MoleMash.pdf&quot;&gt;Download Refined Version (Book Chapter PDF)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial shows you how to build a game similar to the Whac-A-MoleTM arcade game. Specifically, your goal is to whack (tap) a mole that randomly pops out of one of five fixed holes. Every time you succeed, your score is increased by one point.&lt;/p&gt;
&lt;p&gt;In order to highlight new App Inventor features — the Advanced tab and Sprite Z-layering — this app takes a different approach than the &lt;a href=&quot;http://explore.appinventor.mit.edu/content/molemash&quot;&gt;original Mole Mash tutorial&lt;/a&gt;, which you need not have read in order to do this one. You should, however, be familiar with the basics of App Inventor — using the Component Designer to build a user interface and using the Blocks Editor to specify event handlers. If you are not familiar with the basics, try stepping through some of the &lt;a href=&quot;/tutorials&quot;&gt;basic tutorials&lt;/a&gt; before continuing.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This tutorial includes:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Creating a list of components&lt;/li&gt;
&lt;li&gt;Using functionality from the Advanced section of the Blocks Editor to get and set properties of arbitrary components&lt;/li&gt;
&lt;li&gt;Having game events controlled by the &lt;b&gt;Clock&lt;/b&gt; component&lt;/li&gt;
&lt;li&gt;Using Sprite Z-layering to ensure that one sprite (&lt;b&gt;ImageSprite&lt;/b&gt; or &lt;b&gt;Ball&lt;/b&gt;) appears in front of another&lt;/li&gt;
&lt;/ol&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;Connect to the App Inventor web site and start a new project. Set the screen&#039;s &lt;b style=&quot;color:green;&quot;&gt;Title&lt;/b&gt; property to an appropriate name, such as &quot;Mole Mash&quot;. Open the Blocks Editor and connect it to the phone. Download these image files (created by Yun Miao) by right-clicking on them, then add them to the project by pressing the &quot;Add...&quot; button in the Media pane.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/sites/all/files/tutorials/moleMash2/hole.png&quot;&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/hole.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/sites/all/files/tutorials/moleMash2/mole.png&quot;&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/mole.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Set up the Components&lt;/h4&gt;
&lt;p&gt;The user interface will contain a total of 6 ImageSprites: 5 unmoving holes and 1 mole, which will move on top of the holes. Use the component designer to create the user interface. When you are done, it should look something like the picture below. Don&#039;t worry about lining up the holes evenly. You will specify their locations through their &lt;b style=&quot;color:green;&quot;&gt;X&lt;/b&gt; and &lt;b style=&quot;color:green;&quot;&gt;Y&lt;/b&gt; properties. Additional instructions are below the picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/designer1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Create the following components by dragging them from the Palette into the Viewer.&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Component Type
&lt;/td&gt;
&lt;td&gt;
Palette Group
&lt;/td&gt;
&lt;td&gt;
What you&#039;ll name it
&lt;/td&gt;
&lt;td&gt;
Purpose of Component
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Canvas&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;GameCanvas&lt;/td&gt;
&lt;td&gt;The game field&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;ImageSprite&lt;/b&gt; (5)
&lt;/td&gt;
&lt;td&gt;Animation&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;Hole1 ... Hole5&lt;/td&gt;
&lt;td&gt;Holes from which the mole can appear&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;ImageSprite&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Animation&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;Mole&lt;/td&gt;
&lt;td&gt;The mole&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;HorizontalArrangement&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Screen Arrangement&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ScoreArrangement&lt;/td&gt;
&lt;td&gt;To display the score&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Label&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ScoreTextLabel&lt;/td&gt;
&lt;td&gt;To hold &quot;Score: &quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Label&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ScoreValueLabel&lt;/td&gt;
&lt;td&gt;To hold the score (# of times the mole was hit)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Clock&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;MoleClock&lt;/td&gt;
&lt;td&gt;To control the mole&#039;s movement&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Sound&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Media&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;Buzzer&lt;/td&gt;
&lt;td&gt;To vibrate when the mole is touched&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Make the following changes to the components&#039; properties:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Component
&lt;/td&gt;
&lt;td&gt;
Action
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Canvas1&lt;/td&gt;
&lt;td&gt;Set &lt;b style=&quot;color:green;&quot;&gt;BackgroundColor&lt;/b&gt; to Green. Set &lt;b style=&quot;color:green;&quot;&gt;Width&lt;/b&gt; to 320 pixels. Set &lt;b style=&quot;color:green;&quot;&gt;Height&lt;/b&gt; to 320 pixels.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hole1&lt;/td&gt;
&lt;td&gt;Set &lt;b style=&quot;color:green;&quot;&gt;X&lt;/b&gt; to 20 and &lt;b style=&quot;color:green;&quot;&gt;Y&lt;/b&gt; to 60 (upper left).&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hole2&lt;/td&gt;
&lt;td&gt;Set &lt;b style=&quot;color:green;&quot;&gt;X&lt;/b&gt; to 130 and &lt;b style=&quot;color:green;&quot;&gt;Y&lt;/b&gt; to 60 (upper center).&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hole3&lt;/td&gt;
&lt;td&gt;Set &lt;b style=&quot;color:green;&quot;&gt;X&lt;/b&gt; to 240 and &lt;b style=&quot;color:green;&quot;&gt;Y&lt;/b&gt; to 60 (upper right)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hole4&lt;/td&gt;
&lt;td&gt;Set &lt;b style=&quot;color:green;&quot;&gt;X&lt;/b&gt; to 75 and &lt;b style=&quot;color:green;&quot;&gt;Y&lt;/b&gt; to 140 (lower left).&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hole5&lt;/td&gt;
&lt;td&gt;Set &lt;b style=&quot;color:green;&quot;&gt;X&lt;/b&gt; to 185 and &lt;b style=&quot;color:green;&quot;&gt;Y&lt;/b&gt; to 140 (lower right).&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mole&lt;/td&gt;
&lt;td&gt;Set &lt;b style=&quot;color:green;&quot;&gt;Picture&lt;/b&gt; to &quot;mole.png&quot;. Set &lt;b style=&quot;color:green;&quot;&gt;Z&lt;/b&gt; to 2 so the mole appears in front of the other &lt;b style=&quot;color:green;&quot;&gt;ImageSprite&lt;/b&gt; s, which have the default &lt;b style=&quot;color:green;&quot;&gt;Z&lt;/b&gt; value of 1.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ScoreTextLabel&lt;/td&gt;
&lt;td&gt;Set &lt;b style=&quot;color:green;&quot;&gt;Text&lt;/b&gt; to &quot;Score: &quot;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ScoreTextValue&lt;/td&gt;
&lt;td&gt;Set &lt;b style=&quot;color:green;&quot;&gt;Text&lt;/b&gt; to &quot;0&quot;.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Don&#039;t worry now about setting the &lt;b style=&quot;color:green;&quot;&gt;Picture&lt;/b&gt; property for the holes; we&#039;ll set the property in the Blocks Editor.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Add Behaviors to the Components&lt;/h4&gt;
&lt;p&gt;Here is an overview of what we need to create blocks to do:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create variables:
&lt;ol&gt;&lt;li&gt;&lt;b style=&quot;color:green;&quot;&gt;holes&lt;/b&gt;: a list of holes&lt;/li&gt;
&lt;li&gt;&lt;b style=&quot;color:green;&quot;&gt;currentHole&lt;/b&gt;: the hole the mole is currently coming out of&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;When the app starts:
&lt;ol&gt;&lt;li&gt;Populate the list of holes.&lt;/li&gt;
&lt;li&gt;Set each hole&#039;s &lt;b style=&quot;color:green;&quot;&gt;Picture&lt;/b&gt; property to &quot;hole.png&quot;.&lt;/li&gt;
&lt;li&gt;Call procedure &lt;span class=&quot;callblock&quot;&gt;MoveMole&lt;/span&gt; (below).&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Create a procedure &lt;span class=&quot;callblock&quot;&gt;MoveMole&lt;/span&gt; to:
&lt;ol&gt;&lt;li&gt;Set &lt;b style=&quot;color:green;&quot;&gt;currentHole&lt;/b&gt; to a random hole from the list &lt;b style=&quot;color:green;&quot;&gt;holes&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;Move the mole to the location of &lt;b style=&quot;color:green;&quot;&gt;currentHole&lt;/b&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Make &lt;b&gt;MoleClock&lt;/b&gt; call &lt;span class=&quot;callblock&quot;&gt;MoveMole&lt;/span&gt; whenever its timer goes off (every second).
&lt;/li&gt;
&lt;li&gt;Implement a handler that does the following when the mole is touched:
&lt;ol&gt;&lt;li&gt;Add one to the score.&lt;/li&gt;
&lt;li&gt;Make the phone briefly vibrate.&lt;/li&gt;
&lt;li&gt;Call &lt;span class=&quot;callblock&quot;&gt;MoveMole&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;To proceed, open the Blocks Editor.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Creating Variables&lt;/h4&gt;
&lt;p&gt;Create the variables &lt;b style=&quot;color:green;&quot;&gt;holes&lt;/b&gt; and &lt;b style=&quot;color:green;&quot;&gt;currentHole&lt;/b&gt;. For now, we will give them &quot;dummy&quot; initial values; we&#039;ll set their real initial values in the &lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt; event handler, which is run when the app starts. (For technical reasons, components cannot be referred to in def blocks, which are run before the app has started.) Here is a picture and list of the blocks you will need:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/blocks1.png&quot; /&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;def variable as&lt;/span&gt; (holes)&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Hold a list of holes.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock&quot;&gt;make a list&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;Create an empty list, to be filled in when the program starts.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;def variable as&lt;/span&gt; (currentHole)&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Hold the mole&#039;s current hole.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;number&lt;/span&gt; (0)&lt;/td&gt;
&lt;td&gt;Numbers&lt;/td&gt;
&lt;td&gt;Provide a required initial value for &lt;b style=&quot;color:green;&quot;&gt;currentHole&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;As always, comments (created by right-clicking on a block) are encouraged but not required.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Starting the App&lt;/h4&gt;
&lt;p&gt;The first event to occur in any program in &lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt;, so we will put start-up code in that handler. Specifically, we will add the hole components to the list holes, set each hole&#039;s &lt;b style=&quot;color:green;&quot;&gt;Picture&lt;/b&gt; property to &quot;hole.png&quot;, and call &lt;span class=&quot;callblock&quot;&gt;MoveMole&lt;/span&gt;. Since we have not yet written MoveMole, we will create an empty procedure with that name, which we will fill in later.&lt;/p&gt;
&lt;p&gt;Below are a picture and table of the blocks you need to create. Note that the &quot;Any ImageSprite&quot; drawer is found under the &quot;Advanced&quot; tab to the right of &quot;Built-In&quot; and &quot;My Blocks&quot; in the Blocks Editor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/blocks2.png&quot; /&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Screen1&lt;/td&gt;
&lt;td&gt;Specify what should happen when the app starts.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock&quot;&gt;add items to list&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;Add the following values to...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;holes&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;...the list of holes:&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;component Hole1&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Hole1&lt;/td&gt;
&lt;td&gt;-the upper left hole&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;component Hole2&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Hole2&lt;/td&gt;
&lt;td&gt;-the upper center hole&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;component Hole3&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Hole3&lt;/td&gt;
&lt;td&gt;-the upper right hole&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;component Hole4&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Hole4&lt;/td&gt;
&lt;td&gt;-the lower left hole&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;component Hole5&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Hole5&lt;/td&gt;
&lt;td&gt;-the lower right hole&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Specify that we would like...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;name&lt;/span&gt; (hole)&lt;/td&gt;
&lt;td&gt;Definitions&lt;/td&gt;
&lt;td&gt;...a variable named &quot;hole&quot;...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;holes&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;...to take on each of the values in the list holes .&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;ImageSprite.Picture&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Any Image Sprite&lt;/td&gt;
&lt;td&gt;Set the Picture property of...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value hole&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;...the ImageSprite referred to by the variable hole ...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text (hole.png)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;...to the picture of the empty hole.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;to procedure&lt;/span&gt; (MoveMole)&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Create an procedure, to be filled in later, for moving the mole.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;MoveMole&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Call MoveMole to make the first placement of the mole.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Compare the &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt; block to the equivalent blocks that would be necessary without it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/molemash2.JPG&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Not only is the left set of blocks shorter, it is less repetitious, sparing the programmer from semi-mindless copy-and-pasting and making it easier to modify, for example, if the name of the picture is changed.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Moving the Mole&lt;/h4&gt;
&lt;p&gt;Now let&#039;s fill in the body of the procedure MoveMole, which we&#039;ll call when the program starts, when the mole gets touched, and when our timer goes off every second. What we want it to do is to pick a random hole and move the mole on top of it. Here are a picture and list of the new blocks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/blocks4.png&quot; /&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set currentHole to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Save the...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock&quot;&gt;call pick random item&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;...randomly selected...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;holes&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;...hole.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;call Mole.MoveTo&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Mole&lt;/td&gt;
&lt;td&gt;Move the mole to the...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;ImageSprite.X&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Advanced/ImageSprite&lt;/td&gt;
&lt;td&gt;..x-coordinate of...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;currentHole&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;...the chosen hole...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;ImageSprite.Y&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Advanced/ImageSprite&lt;/td&gt;
&lt;td&gt;...and the y-coordinate of...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;current Hole&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;...the chosen hole.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We now need to specify that MoveMole should be called whenever MoleClock&#039;s Timer goes off. We just need two blocks to accomplish that:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/blocks5.png&quot; /&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;MoleClock.Timer&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;MoleClock&lt;/td&gt;
&lt;td&gt;When the timer goes off...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;call MoveMole&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;...move the mole.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Registering Touches&lt;/h4&gt;
&lt;p&gt;Finally, we need to specify what happens when the mole is touched. Specifically, we want to:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Increment the score.&lt;/li&gt;
&lt;li&gt;Make the phone vibrate briefly.&lt;/li&gt;
&lt;li&gt;Move the mole.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We can easily translate these to blocks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/blocks6.png&quot; /&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;Mole.Touched&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Mole&lt;/td&gt;
&lt;td&gt;When the mole is touched...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set ScoreValueLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ScoreValueLabel&lt;/td&gt;
&lt;td&gt;...update the visible score to...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt; block&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;...the result of adding...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;number&lt;/span&gt; (1)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;...1 [and]...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;ScoreValueLabel.Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ScoreValueLabel&lt;/td&gt;
&lt;td&gt;...the previous score.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;call Buzzer.Vibrate&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Buzzer&lt;/td&gt;
&lt;td&gt;Make the phone vibrate for...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;number&lt;/span&gt; (100)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;...100 milliseconds.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;call MoveMole&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Move the mole to a new location.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Final Program&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/blocks-final.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Variations&lt;/h4&gt;
&lt;p&gt;Here are some variations you might want to implement:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Adding a Reset button to set the score back to 0.&lt;/li&gt;
&lt;li&gt;Having the score depend not just on the number of hits but also the number of misses and escaped moles.&lt;/li&gt;
&lt;li&gt;Increasing the speed of the game of mole movement if the player is doing well and decreasing it if the player is doing poorly.&lt;/li&gt;
&lt;li&gt;Adding a second mole on a different timer.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You can see how to implement the first two variations in the &lt;a href=&quot;http://explore.appinventor.mit.edu/content/molemash&quot;&gt;original Mole Mash tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Review&lt;/h4&gt;
&lt;p&gt;Here are some of the ideas covered in this tutorial:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Putting components in a &lt;b&gt;List&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;Performing an operation on every component in a &lt;b&gt;List&lt;/b&gt; using the &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt; block and Advanced features.&lt;/li&gt;
&lt;li&gt;Placing an &lt;b&gt;ImageSprite&lt;/b&gt; on top of another, using their &lt;b style=&quot;color:green;&quot;&gt;Z&lt;/b&gt; properties to control which goes in front.&lt;/li&gt;
&lt;li&gt;Using the &lt;b&gt;Clock&lt;/b&gt; component to control game play.&lt;/li&gt;
&lt;li&gt;Creating a procedure and calling it from multiple places.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;ai-box&quot;&gt;Done with &lt;span style=&quot;color:black;&quot;&gt;MoleMash 2&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app.
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/moleMash2/MoleMash2Barcode.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/moleMash2/MoleMash2.apk&quot;&gt;download the apk&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to work with this sample in App Inventor, download the &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/moleMash2/MoleMash2.zip&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, go to the My Projects page, and choose &lt;b&gt;More Actions | Upload Source&lt;/b&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Sprites&lt;/li&gt;&lt;li class=&quot;field-item odd&quot;&gt;Clock Timer&lt;/li&gt;&lt;li class=&quot;field-item even&quot;&gt;Game&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Wed, 26 Jun 2013 19:45:48 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">338 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>VideoWall</title>
 <link>http://explore.appinventor.mit.edu/content/videowall</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;

}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

.controlblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FAEDBB;
font-size: 9pt;
text-wrap: suppress;
}


/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;What you&#039;re building&lt;/h4&gt;
&lt;p&gt;The VideoWall app tutorial demonstrates how you can control the size of a video playing in an app by using the &lt;strong&gt;Video Player&lt;/strong&gt; component&#039;s &lt;b style=&quot;color:green;&quot;&gt;Width&lt;/b&gt;, &lt;b style=&quot;color:green;&quot;&gt;Height&lt;/b&gt;, and &lt;b style=&quot;color:green;&quot;&gt;FullScreen&lt;/b&gt; features. The VideoWall uses media assets (videos stored in the app itself), but you can use the app to display videos from the internet as well.&lt;/p&gt;
&lt;p&gt;This tutorial assumes you are familiar with the basics of App Inventor-- using the Component Designer to build a user interface, and using the Blocks Editor to specify the app&#039;s behavior. If you are not familiar with the basics, try stepping through some of the &lt;a href=&quot;/tutorials&quot;&gt;basic tutorials&lt;/a&gt; before continuing.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;Connect to the App Inventor web site and start a new project. Name the new project VideoWall and set the screen&#039;s Orientation to Landscape.&lt;/p&gt;
&lt;p&gt;Download the following video files* for use later on:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;/sites/all/files/tutorials/videoWall/bigbuckbunny.3gp&quot;&gt;BigBuckBunny (bigbuckbunny.3gp)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sites/all/files/tutorials/videoWall/nasa.3gp&quot;&gt;NASA (nasa.3gp)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/sites/all/files/tutorials/videoWall/sintel.3gp&quot;&gt;Sintel (sintel.3gp)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;*Attributions for these videos are included at the end of this tutorial.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;The finished VideoWall app will display a wall of three videos that can be expanded to their true size and then shrunk back down again. The app will also allow you to display the videos in fullscreen. This tutorial assumes you have followed earlier tutorials to learn how the following blocks work:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;argblock&quot;&gt;Variables&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;callblock&quot;&gt;Procedures&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;basicblock&quot;&gt;Button.Click blocks&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;controlblock&quot;&gt;Logic (if-else) blocks&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This tutorial introduces the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Using Advanced blocks&lt;/li&gt;
&lt;li&gt;Resizing the VideoPlayer&lt;/li&gt;
&lt;li&gt;Showing the VideoPlayer video in fullscreen mode&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Set up the Components&lt;/h4&gt;
&lt;p&gt;Use the component designer to create the interface for the &lt;span style=&quot;color:green;&quot;&gt;VideoWall&lt;/span&gt;. When completed, the designer should look similar to the snapshot below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/videoWall/setupcomponents.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;First, you need to upload the video files. Click on the Add... button and select a video file downloaded earlier. Repeat this step to add the other two video files. Now create the interface by dragging and dropping the components from the Palette to the Viewer.&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Component Type
&lt;/td&gt;
&lt;td&gt;
Palette Group
&lt;/td&gt;
&lt;td&gt;
What you&#039;ll name it
&lt;/td&gt;
&lt;td&gt;
Purpose of Component
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;HorizontalArrangement&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Screen Arrangement&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;HorizontalArrangement1&lt;/td&gt;
&lt;td&gt;Holds all other components: makes the three vertical arrangements line up side by side&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;VerticalArrangement&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Screen Arrangement&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;VerticalArrangement1&lt;/td&gt;
&lt;td&gt;Holds the left-most VideoPlayer and controls&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;VerticalArrangement&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Screen Arrangement&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;VerticalArrangement2&lt;/td&gt;
&lt;td&gt;Holds the middle VideoPlayer and controls&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;VerticalArrangement&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Screen Arrangement&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;VerticalArrangement3&lt;/td&gt;
&lt;td&gt;Holds the right-most VideoPlayer and controls&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;VideoPlayer&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Media&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;VideoPlayer1&lt;/td&gt;
&lt;td&gt;Displays the BigBuckBunny video&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;VideoPlayer&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Media&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;VideoPlayer2&lt;/td&gt;
&lt;td&gt;Displays the NASA video&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;VideoPlayer&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Media&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;VideoPlayer3&lt;/td&gt;
&lt;td&gt;Displays the Sintel video&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Button&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ResizeButton1&lt;/td&gt;
&lt;td&gt;Resizes VideoPlayer1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Button&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ResizeButton2&lt;/td&gt;
&lt;td&gt;Resizes VideoPlayer2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Button&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ResizeButton3&lt;/td&gt;
&lt;td&gt;Resizes VideoPlayer3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Button&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;FullScreenButton1&lt;/td&gt;
&lt;td&gt;Shows the VideoPlayer1 video in fullscreen&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Button&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;FullScreenButton2&lt;/td&gt;
&lt;td&gt;Shows the VideoPlayer2 video in fullscreen&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Button&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;FullScreenButton3&lt;/td&gt;
&lt;td&gt;Shows the VideoPlayer3 video in fullscreen&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Set the properties as described below:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Component&lt;/td&gt;
&lt;td&gt;Action&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;HorizontalArrangement1&lt;/td&gt;
&lt;td&gt;Set Width to Fill parent...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;VerticalArrangement1, VerticalArrangement2, &lt;span style=&quot;color:black;&quot;&gt;and&lt;/span&gt; VerticalArrangement3&lt;/td&gt;
&lt;td&gt;Set Width to Fill parent...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;ResizeButton1, ResizeButton2, &lt;span style=&quot;color:black;&quot;&gt;and&lt;/span&gt; ResizeButton3&lt;/td&gt;
&lt;td&gt;Set Text to &quot;Grow&quot; and set Width to Fill parent...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;FullScreenButton1, FullScreenButton2, &lt;span style=&quot;color:black;&quot;&gt;and&lt;/span&gt; FullScreenButton3
&lt;/td&gt;
&lt;td&gt;Set Text to Show FullScreen and set Width to Fill parent...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;VideoPlayer1&lt;/td&gt;
&lt;td&gt;Set Source to bigbuckbunny.3gp , set Width to Fill parent... , and set Height to 36 pixels&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;VideoPlayer2&lt;/td&gt;
&lt;td&gt;Set Source to nasa.3gp , set Width to Fill parent... , and set Height to 36 pixels&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;VideoPlayer3&lt;/td&gt;
&lt;td&gt;Set Source to sintel.3gp , set Width to Fill parent... , and set Height to 36 pixels&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Add Behaviors to the Components&lt;/h4&gt;
&lt;p&gt;The interface is complete, but the buttons don&#039;t resize the videos yet. Open the Blocks Editor to add the behavior to the buttons. First, you&#039;ll define three variable blocks to keep track of the size of the VideoPlayers:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;def variable&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Defines the vid1_zoomed variable (rename it)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;def variable&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Defines the vid2_zoomed variable (rename it)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;def variable&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Defines the vid3_zoomed variable (rename it)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The three variables should like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/videoWall/flagblocks.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Create the &lt;span class=&quot;callblock&quot;&gt;resizeVideoPlayer Procedure&lt;/span&gt; block. There are three VideoPlayers in the app, but you&#039;ll use one Procedure block to resize all three. To accomplish this simplicity, you will use the Advance blocks component &lt;span class=&quot;setblock&quot;&gt;Any VideoPlayer&lt;/span&gt; blocks. Create the &lt;span class=&quot;callblock&quot;&gt;resizeVideoPlayer Procedure&lt;/span&gt; block using the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;Procedure&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Defines the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;name&lt;/span&gt; (x5)&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Defines the VideoPlayer argument for the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;name&lt;/span&gt; (x2)&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Defines the zoomed argument for the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;name&lt;/span&gt; (x3)&lt;/td&gt;
&lt;td&gt;Definition&lt;/td&gt;
&lt;td&gt;Defines the button argument for the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;ifelse&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Defines the ifelse block that chooses whether the VideoPlayer is shrunk or expanded&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;=&lt;/span&gt; block&lt;/td&gt;
&lt;td&gt;Logic&lt;/td&gt;
&lt;td&gt;Defines the equals block for testing if the zoomed block is true&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;true&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Logic&lt;/td&gt;
&lt;td&gt;Defines the block that zoomed is compared to&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;VideoPlayer.Width&lt;/span&gt; (x2)&lt;/td&gt;
&lt;td&gt;Any VideoPlayer&lt;/td&gt;
&lt;td&gt;Sets the VideoPlayer Width to a number&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;Number (-1)&lt;/span&gt; (x2)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Width to set VideoPlayer to&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;VideoPlayer.Height &lt;/span&gt; (x2)&lt;/td&gt;
&lt;td&gt;Any VideoPlayer&lt;/td&gt;
&lt;td&gt;Sets the VideoPlayer Height to a number&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;Number&lt;/span&gt; (x2), values of 26 and 144&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Height to set VideoPlayer to&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;Button.text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Any Button&lt;/td&gt;
&lt;td&gt;Changes the button text&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Text to set button to. Make one text block text&#039;s Shrink and the other&#039;s Grow.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The &lt;span class=&quot;callblock&quot;&gt;resizeVideoPlayer&lt;/span&gt; block should look like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/videoWall/resize_block.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;span class=&quot;callblock&quot;&gt;resizeVideoPlayer&lt;/span&gt; block will be explained later after you create the blocks for responding to button clicks.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Create the Click Blocks&lt;/h4&gt;
&lt;p&gt;The blocks you will create respond to clicks on the ResizeButton buttons. To build the three blocks, you will need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;ResizeButton1.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ResizeButton1&lt;/td&gt;
&lt;td&gt;Defines the block for responding to clicks on ResizeButton1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;ResizeButton2.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ResizeButton2&lt;/td&gt;
&lt;td&gt;Defines the block for responding to clicks on ResizeButton2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;ResizeButton3.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ResizeButton3&lt;/td&gt;
&lt;td&gt;Defines the block for responding to clicks on ResizeButton3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;ResizeVideoPlayer&lt;/span&gt; (x3)&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Starts the resizeVideoPlayer block for resizing a VideoPlayer&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;not&lt;/span&gt; (x3)&lt;/td&gt;
&lt;td&gt;Logic&lt;/td&gt;
&lt;td&gt;Defines the block for switching the various zoomed block values&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;set global vid1_zoomed&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Sets the vid1_zoomed block to a different value&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;set global vid2_zoomed&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Sets the vid2_zoomed block to a different value&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;set global vid3_zoomed&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Sets the vid3_zoomed block to a different value&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;global vid1_zoomed&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Used to change the vid1_zoomed value.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;global vid2_zoomed&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Used to change the vid2_zoomed value.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;global vid3_zoomed&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Used to change the vid3_zoomed value.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;component ResizeButton1&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ResizeButton1&lt;/td&gt;
&lt;td&gt;Passed to the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;component ResizeButton2&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ResizeButton2&lt;/td&gt;
&lt;td&gt;Passed to the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;component ResizeButton3&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ResizeButton3&lt;/td&gt;
&lt;td&gt;Passed to the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;component VideoPlayer1&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;VideoPlayer1&lt;/td&gt;
&lt;td&gt;Passed to the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;component VideoPlayer2&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;VideoPlayer2&lt;/td&gt;
&lt;td&gt;Passed to the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;component VideoPlayer3&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;VideoPlayer3&lt;/td&gt;
&lt;td&gt;Passed to the resizeVideoPlayer procedure&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/videoWall/resize_blocks.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Most blocks in App Inventor require you to know exactly what component your app will manipulate when you design the app. For some apps, you will have several of the same type of component and you want to program the same behavior for all of the similar components (like the VideoPlayer blocks in this app). The blocks in the Advanced section allow you to build some general manipulation on some type of component. When you built the &lt;span class=&quot;callblock&quot;&gt;resizeVideoPlayer procedure&lt;/span&gt; block, you didn&#039;t know specifically which VideoPlayer would be used in the procedure. The &lt;span class=&quot;callblock&quot;&gt;resizeVideoPlayer&lt;/span&gt; works on VideoPlayers; but not until the &lt;span class=&quot;callblock&quot;&gt;resizeVideoPlayer&lt;/span&gt; block is used in the &lt;span class=&quot;basicblock&quot;&gt;ResizeButton1.Click&lt;/span&gt; block (for example) is the specific VideoPlayer known.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The &lt;span style=&quot;color:green;&quot;&gt;VideoWall&lt;/span&gt; app could have been designed with a specific resizing procedure for each VideoPlayer. By using the Advanced blocks in a single resizing procedure, the app is much simpler.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;Setting the Width and Height property for a VideoPlayer works exactly the same way as setting the Width and Height of a Button. For whatever positive number is set, the video playing will resize its appearance to fit that value. There are two values that are exceptions to the using positive values rule: -1 and -2. Setting VideoPlayer.Width or VideoPlayer.Height to -1 is like setting the Width or Height to &lt;em&gt;Fill parent&lt;/em&gt; in the designer. Setting VideoPlayer.Width or VideoPlayer.Height to -2 is like setting the Width or Height to &lt;em&gt;Automatic&lt;/em&gt; in the designer.&lt;/p&gt;
&lt;pre class=&quot;ai-warning&quot;&gt;&lt;b&gt;Warning:&lt;/b&gt; You can set the VideoPlayer Width and Height to any positive number you want. The VideoPlayer will change its size to match the values you set; but on some devices, the VideoPlayer does not change its size correctly. The behavior on such devices is usually unpredictable.&lt;/pre&gt;&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test this behavior.&lt;/b&gt; Click on the Grow button below the BigBuckBunny video. The video&#039;s size should expand, and the text of the button should change to &quot;Shrink&quot;. Click on the Shrink button below the BigBuckBunny video. The video&#039;s size should shrink back to its original size and the text should change back to &quot;Grow&quot;.&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Create the blocks for showing fullscreen video&lt;/h4&gt;
&lt;p&gt;You will now add the blocks for showing the videos in fullscreen mode. Use the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Block Type&lt;/td&gt;
&lt;td&gt;Drawer&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;true&lt;/span&gt; (x3)&lt;/td&gt;
&lt;td&gt;Logic&lt;/td&gt;
&lt;td&gt;Value to set FullScreen as&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;FullScreenButton1.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;FullScreenButton1&lt;/td&gt;
&lt;td&gt;Responds to clicks on FullScreenButton1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;set VideoPlayer1.FullScreen&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;VideoPlayer1&lt;/td&gt;
&lt;td&gt;Used to show fullscreen video&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;FullScreenButton2.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;FullScreenButton2&lt;/td&gt;
&lt;td&gt;Responds to clicks on FullScreenButton2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;set VideoPlayer2.FullScreen&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;VideoPlayer2&lt;/td&gt;
&lt;td&gt;Used to show fullscreen video&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;FullScreenButton3.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;FullScreenButton3&lt;/td&gt;
&lt;td&gt;Responds to clicks on FullScreenButton3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;ai-blocks&quot;&gt;set VideoPlayer3.FullScreen&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;VideoPlayer3&lt;/td&gt;
&lt;td&gt;Used to show fullscreen video&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/videoWall/fullscreen_blocks.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;The &lt;span class=&quot;setblock&quot;&gt;VideoPlayer.FullScreen&lt;/span&gt; block takes a true/false value (also called a boolean) to tell it whether to go full screen or not. Setting a &lt;span class=&quot;setblock&quot;&gt;VideoPlayer.FullScreen&lt;/span&gt; block to true causes that VideoPlayer to be displayed in fullscreen mode. If there is another VideoPlayer in fullscreen mode, that VideoPlayer&#039;s .FullScreen value is set to false and it is replaced with the current VideoPlayer. If a &lt;span class=&quot;setblock&quot;&gt;VideoPlayer.FullScreen&lt;/span&gt; is true, setting a &lt;span class=&quot;setblock&quot;&gt;VideoPlayer.FullScreen&lt;/span&gt; block to false causes the fullscreen mode to be exited and the app&#039;s interface to display. Test this behavior. Start playing the BigBuckVideo, and click on the Show FullScreen button below the BigBuckBunny video. The app&#039;s interface should disappear and some media controls with the BigBuckBunny video should appear. Use the Back button on your device or the emulator to exit fullscreen. The app&#039;s interface should appear.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Final Program&lt;/h4&gt;
&lt;p&gt;VideoWall Final Version&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/videoWall/blockseditor_full.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Package the final version of the app by choosing &lt;b&gt;Package For Phone | Barcode&lt;/b&gt; from the Component Designer menu. When the barcode appears, use the barcode scanner on your phone to download and install the app. &lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Variations&lt;/h4&gt;
&lt;p&gt;Now that you have finished the first &lt;span style=&quot;color:green;&quot;&gt;VideoWall&lt;/span&gt; app, you might want to build some variations. For example:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Get more video files and add a second row to create a real VideoWall&lt;/li&gt;
&lt;li&gt;Use videos from an online server.&lt;/li&gt;
&lt;li&gt;Expand the resizeVideoPlayer procedure to resize VideoPlayers by small increments to create an animation effect. You could use multiple Clocks to start the resizeVideoPlayer procedure and animate multiple VideoPlayers at once.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;b&gt;If you distribute your app to others, make sure you respect any license requirements for the videos you use.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Below are the attributions to the video files included in this demo app. The creators of the source videos that these clips are from do not endorse App Inventor.&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Video File&lt;/td&gt;
&lt;td&gt;Information&lt;/td&gt;
&lt;td&gt;Attribution&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;bigbuckbunny.3gp&lt;/td&gt;
&lt;td&gt;A clip from the full length film&lt;/td&gt;
&lt;td&gt;(c) copyright 2008, Blender Foundation / &lt;a href=&quot;http://www.bigbuckbunny.org&quot;&gt;http://www.bigbuckbunny.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nasa.3gp&lt;/td&gt;
&lt;td&gt;A formatted version of the Mars&#039; Whirling Dust Devil clip.&lt;/td&gt;
&lt;td&gt;Here is the &lt;a&gt;original video.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sintel.3gp&lt;/td&gt;
&lt;td&gt;A clip from the full length film
&lt;/td&gt;
&lt;td&gt;(c) copyright Blender Foundation | &lt;a href=&quot;http://durian.blender.org&quot;&gt;http://durian.blender.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app.
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/videoWall/VideoWallBarcode.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/videoWall/VideoWall.apk&quot;&gt;download the apk&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to work with this sample in App Inventor, download the &lt;a href=&quot;/sites/all/files/tutorials/videoWall/VideoWall_0.zip&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, go to the My Projects page, and choose &lt;b&gt;More Actions | Upload Source&lt;/b&gt;.&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;MIT is grateful to &lt;a href=&quot;http://explore.appinventor.mit.edu/people/vance-turnewitsch&quot;&gt;Vance Turnewitsch&lt;/a&gt; for developing this tutorial.

Done with &lt;span style=&quot;color:black;&quot;&gt;VideoWall&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Video&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 14 Jun 2013 16:23:45 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">324 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>StockQuotes</title>
 <link>http://explore.appinventor.mit.edu/content/stockquotes</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;
	
}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

.controlblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FAEDBB;
font-size: 9pt;
text-wrap: suppress;
}

/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;h2 class=&quot;ai-header&quot;&gt;&lt;span style=&quot;color:green;&quot;&gt;StockQuotes&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;What You&#039;re Building&lt;/h4&gt;
&lt;p&gt;Just like you can access web pages from your phone -- for example, to look up a stock price -- so can App Inventor.  This app enables the user to enter a stock symbol, then looks up the price of the stock on Yahoo! Finance and displays the price on the phone.&lt;/p&gt;
&lt;p&gt;This tutorial assumes that you are familiar with the basics of App Inventor -- using the Component Designer to build a user interface and using the Blocks Editor to specify event handlers.  If you are not familiar with the basics, try stepping through some of the &lt;a href=&quot;/tutorials&quot;&gt;basic tutorials&lt;/a&gt; before continuing.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This tutorial includes&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Accepting text input from the user to specify the stock symbol.&lt;/li&gt;
&lt;li&gt;Using the Web component to ask Google Finance for the latest price for the stock.&lt;/li&gt;
&lt;li&gt;Displaying the result.&lt;/li&gt;
&lt;/ol&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;Connect to the App Inventor web site and start a new project.  Name it StockQuotes, and also set the screen’s &lt;b style=&quot;color:green;&quot;&gt;Title&lt;/b&gt; to “Stock Quotes”. Open the Blocks Editor and connect it to the phone.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Set up the Components&lt;/h4&gt;
&lt;p&gt;Use the component designer to create the user interface.  When you are done, it should look something like the picture below.  Additional instructions are below the picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/stockQuotes/components1.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Create the following components by dragging them from the Palette into the Viewer.&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Component Type
&lt;/td&gt;
&lt;td&gt;
Palette Group
&lt;/td&gt;
&lt;td&gt;
What you&#039;ll name it
&lt;/td&gt;
&lt;td&gt;
Purpose of Component
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;TextBox&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;StockSymbolTextBox&lt;/td&gt;
&lt;td&gt;Where the user enters the stock symbol&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Button&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;GetQuoteButton&lt;/td&gt;
&lt;td&gt;To request the stock quote&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Label&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ValueLabel&lt;/td&gt;
&lt;td&gt;To display the stock quote&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Web&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Other stuff&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;Web1&lt;/td&gt;
&lt;td&gt;To request and receive the stock quote&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Stick with the default properties except for the following changes:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Component&lt;/td&gt;
&lt;td&gt;Action&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;StockSymbolTextBox&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set its &lt;b style=&quot;color:green;&quot;&gt;Hint&lt;/b&gt; property to &quot;Enter a stock symbol&quot;. Clear its &lt;b style=&quot;color:green;&quot;&gt;Text&lt;/b&gt; property by deleting or backspacing over the contents.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;GetQuoteButton&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set its &lt;b style=&quot;color:green;&quot;&gt;Text&lt;/b&gt; property to &quot;Get Stock Quote&quot;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;ValueLabel&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Clear its &lt;b style=&quot;color:green;&quot;&gt;Text&lt;/b&gt; property.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4 class=&quot;ai-header&quot;&gt;The Yahoo! Finance API&lt;/h4&gt;
&lt;p&gt;Many web services provide an &lt;em&gt;application programmer interface&lt;/em&gt; (API) for developers to enable their programs to access the service. Some ways to discover APIs are through the website &lt;a href=&quot;http://programmableweb.com&quot;&gt;http://programmableweb.com&lt;/a&gt; or just by doing a web search for the service name and “API”.&lt;/p&gt;
&lt;p&gt;The Yahoo! Finance API is documented in gory detail at &lt;a href=&quot;http://www.gummy-stuff.org/Yahoo-data.htm&quot;&gt;http://www.gummy-stuff.org/Yahoo-data.htm&lt;/a&gt; . The highlights are that you can get the latest price for the stock with the symbol &quot;GOOG&quot;, for example, with the URL &lt;a href=&quot;http://finance.yahoo.com/d/quotes.csv?f=l1&amp;amp;s=GOOG&quot;&gt;http://finance.yahoo.com/d/quotes.csv?f=l1&amp;amp;s=GOOG&lt;/a&gt; . The section &quot;f=l1&quot; (lower-case letter L, followed by the number 1) says we would like the latest price, and the section “s=GOOG” says we would like information about the stock whose symbol is “GOOG”.  The result is returned in comma-separated value (CSV) format, which you may be familiar with from spreadsheets.  Since only one value will be returned for our query, the result will be a plain old number, such as “511.5”, without any commas.  (Commas would be used if we requested multiple pieces of data from Yahoo!, such as the name of the company and the daily trade volume.)&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Add Behaviors to the Components&lt;/h4&gt;
&lt;h5 class=&quot;ai-header&quot;&gt;Requesting the Data&lt;/h5&gt;
&lt;p&gt;The blocks to make the web request are shown here and detailed below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/stockQuotes/request-data.png&quot; /&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;GetQuoteButton.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;GetQuoteButton&lt;/td&gt;
&lt;td&gt;Handle a click of the &quot;Get Quote&quot; button.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set Web1.Url to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Web1&lt;/td&gt;
&lt;td&gt;Specify the URL to request.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;call make text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Concatenate the parts of the URL.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&lt;a href=&quot;http://finance.yahoo.com/d/quotes.csv?f=l1&amp;amp;s=&quot;&gt;http://finance.yahoo.com/d/quotes.csv?f=l1&amp;amp;s=&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Specify the first unchanging part of the URL.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;StockSymbolTextBox.Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;StockSymbolTextBox&lt;/td&gt;
&lt;td&gt;Get the stock symbol from the text box.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;call Web1.Get&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Web1&lt;/td&gt;
&lt;td&gt;Make the web request.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The meaning is: When GetQuoteButton is clicked:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Build the Web component’s URL by concatenating “&lt;a href=&quot;http://finance.yahoo.com/d/quotes.csv?f=l1&amp;amp;s=&quot;&gt;http://finance.yahoo.com/d/quotes.csv?f=l1&amp;amp;s=&lt;/a&gt;” (which you should copy and paste into the text block) and the symbol entered by the user (StockSymbolTextBox.Text).&lt;/li&gt;
&lt;li&gt;Request the page specified by the URL. (This is like pressing return after entering a URL in your web browser.)&lt;/li&gt;
&lt;/ol&gt;&lt;h5 class=&quot;ai-header&quot;&gt;Receiving the Data
&lt;/h5&gt;&lt;p&gt;When the response to the web request arrives, the &lt;span class=&quot;basicblock&quot;&gt;Web.GotText&lt;/span&gt; event is raised with four parameters (only some of which we’ll use in this app):&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;b&gt;url&lt;/b&gt;: the URL of the original request (which is useful if requests are made with many different URLs).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;responseCode&lt;/b&gt;: &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_HTTP_status_codes&quot;&gt;the HTTP status code&lt;/a&gt;, which indicates whether the web request succeeded or how it failed; for example, 200 means that the request succeeded, 404 that the page could not be found, etc.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;responseType&lt;/b&gt;: &lt;a href=&quot;http://en.wikipedia.org/wiki/Mime_type&quot;&gt;the MIME type&lt;/a&gt; of the response, such as “text/csv” in this app, “image/jpeg”, etc.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;responseContent&lt;/b&gt;: the data being returned, such as “511.5”.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Here are a picture and table of the blocks you need to create:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/stockQuotes/receive-data.png&quot; /&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;Web1.GotText&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Web1&lt;/td&gt;
&lt;td&gt;Specify what to do when the reply comes back from the web.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;ifelse&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Provide different behavior depending on whether the request succeeded.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value responseCode&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;The response code returned for the web request, which...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt; = &lt;/span&gt;(equals) block&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;...is checked for equality with...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;number&lt;/span&gt; (200)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;...200, the code for valid web responses.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set ValueLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ValueLabel&lt;/td&gt;
&lt;td&gt;Display the result on the screen.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;call make text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Build the result by concatenating...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;Current value: &quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;...the text “Current value: “ and...&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value responseContent&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;...the value returned from the web.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set ValueLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ValueLabel&lt;/td&gt;
&lt;td&gt;Display an error message.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;Error getting stock quote&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;The error message&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here&#039;s a description of the block&#039;s behavior:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;If the response code indicates that the web request succeeded (= 200), set the label to the concatenation of “Current value: “ and the returned data (e.g., 511.5).&lt;/li&gt;
&lt;li&gt;Otherwise, set the label to “Error getting stock quote”.&lt;/li&gt;
&lt;/ol&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Review&lt;/h4&gt;
&lt;p&gt;Here are some ideas introduced in this tutorial:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Using an application programmer interface (API)&lt;/li&gt;
&lt;li&gt;Making a request with the Web component&lt;/li&gt;
&lt;li&gt;Checking whether a web request was successful&lt;/li&gt;
&lt;li&gt;Displaying information returned from the web&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;These ideas will be developed further in the second part of this tutorial, which is under development.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app.
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/stockQuotes/StockQuotesBarcode.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to work with this sample in App Inventor, download the &lt;a href=&quot;/sites/all/files/tutorials/stockQuotes/StockQuotes.zip&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, go to the My Projects page, and choose &lt;b&gt;More Actions | Upload Source&lt;/b&gt;.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Credits&lt;/h4&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This tutorial is based on &lt;a href=&quot;http://appinventorblog.com/2011/06/02/app-inventor-has-a-new-component-the-web/&quot;&gt;an app created by Prof. David Wolber&lt;/a&gt; and relies on the Yahoo! Finance API.

Done with &lt;span style=&quot;color:black;&quot;&gt;StockQuotes&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;External API&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 14 Jun 2013 16:23:17 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">323 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Android, Where&#039;s My Car</title>
 <link>http://explore.appinventor.mit.edu/content/android-wheres-my-car</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;
	
}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

.controlblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FAEDBB;
font-size: 9pt;
text-wrap: suppress;
}

/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;h2 class=&quot;ai-header&quot;&gt;&lt;span style=&quot;color:green;&quot;&gt;Android, Where&#039;s My Car?&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;p&gt;
&lt;a href=&quot;/sites/all/files/tutorials/wheresMyCar/wheresMyCar.zip&quot;&gt;&lt;img src=&quot;/sites/all/files/tutorials/wheresMyCar/android-where.jpg&quot; style=&quot;float:right; width:250px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cs.usfca.edu/~wolber/appinventor/bookSplits/ch7AndroidWhere.pdf&quot;&gt;Download Refined Version (Book Chapter PDF)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You parked somewhere near the stadium or bar, but when the concert/party ends you don&#039;t have a clue where the car is. The friends you came with are equally as clueless.&lt;/p&gt;
&lt;p&gt;Fortunately you haven&#039;t lost your Android phone that never forgets anything, and you remember you have the hot new app, &lt;span style=&quot;color:green;&quot;&gt;Android, Where&#039;s My Car?&lt;/span&gt;. With this app, you click a button when you park your car, and the Android uses its location sensor to record the car&#039;s GPS coordinates and address. Later, when you reopen the app, it shows you a map from where you are to the remembered location-- problem solved!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/dailylifeofmojo/4128596089/&quot;&gt;Photo&lt;/a&gt; licensed under &lt;a href=&quot;http://creativecommons.org/licenses/by/2.0/deed.en&quot;&gt;Creative Commons&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download it, Customize it, Understand it&lt;/h4&gt;
&lt;p&gt;Below is a customizable, annotated and explained &lt;span style=&quot;color:green;&quot;&gt;Android, Where&#039;s My Car?&lt;/span&gt; app. You can:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/sites/all/files/tutorials/wheresMyCar/wheresMyCar.zip&quot;&gt;&lt;img src=&quot;/sites/all/files/tutorials/wheresMyCar/downloadSourcebutton_1.png&quot; style=&quot;float:right; width:250px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Install the app on your phone by scanning a barcode&lt;/li&gt;
&lt;li&gt;Download the source code blocks for the app, upload them into App Inventor, then customize the app or use it as the basis for another idea you have.&lt;/li&gt;
&lt;li&gt;Study the annotated blocks and explanations below to better understand the app and App Inventor programming in general.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Try It&lt;/h4&gt;
&lt;p&gt;Scan the barcode to your Android phone. It will step you through installing the app.&lt;/p&gt;
&lt;p&gt;(If you don&#039;t have a scanner, download the free ZXing scanner by searching for it at the Android Market)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/wheresMyCar/wheresMyCarQRapk.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Customize It&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/wheresMyCar/customize.png&quot; style=&quot;float:right;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Download the source code blocks to create your own customized app.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Save the source file (.zip) to your computer (click icon to the right)&lt;/li&gt;
&lt;li&gt;Do not unzip it-- leave it as a zip file.&lt;/li&gt;
&lt;li&gt;Open the My Projects page in App Inventor.&lt;/li&gt;
&lt;li&gt;Select More Actions | Upload Source from the menu.&lt;/li&gt;
&lt;li&gt;Choose the file you just downloaded&lt;/li&gt;
&lt;/ol&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Understand It&lt;/h4&gt;
&lt;p&gt;The app demonstrates how to communicate with the Android location sensor, how to record data in the phone&#039;s long-term memory (database), and how you can open the Google Maps app from your app to show directions from one one location to another. It makes use of the following App Inventor components:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;b&gt;Location Sensor&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;TinyDB&lt;/b&gt; -- to store the data&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ActivityStarter&lt;/b&gt; -- to open a map&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;The User Interface&lt;/h4&gt;
&lt;p&gt;Here are the components for the &lt;span style=&quot;color:green;&quot;&gt;Android, Where&#039;s My Car?&lt;/span&gt; app, as shown in the Component Designer:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/wheresMyCar/WheresMyCarDesign.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The user interface consists of labels to show location data and buttons to initiate events. Some labels just show static text, e.g., GPSLabel is the text &quot;GPS:&quot; that appears in the user interface. Others, such as CurrentLatLabel, will display dynamic data one the location sensor gets its readings. For these labels, a default value is set (0.0) here in the Component Designer.&lt;/p&gt;
&lt;p&gt;The ActivityStarter1 component is used to launch the map when the user asks for directions. Its properties are only partially shown above. Here is how they should be specified:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Property&lt;/td&gt;
&lt;td&gt;Value&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Action&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;android.intent.action.VIEW&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;ActivityPackage&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;com.google.android.apps.maps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;ActivityClass&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;com.google.android.maps.MapsActivity&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4 class=&quot;ai-header&quot;&gt;The App&#039;s Behavior&lt;/h4&gt;
&lt;p&gt;Here are the blocks for the &lt;span style=&quot;color: green;&quot;&gt;Android, Where&#039;s My Car&lt;/span&gt; app (the yellow annotations will also appear when you load this app into App Inventor):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/wheresMyCar/WheresMyCarBlocks.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let&#039;s examine the four different event-handlers of the app, starting in the top-left and working around in counter-clockwise order.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;basicblock&quot;&gt;LocationSensor1.LocationChanged&lt;/span&gt;: This event occurs when the phone&#039;s location sensor first gets a reading, or when the phone is moved to produce a new reading, The event-handler just places the readings--latitude, longitude, and current (street) address-- into the corresponding &quot;Current&quot; labels so that they appear on the phone.The RememberButton is also enabled in this event-handler. Its enabled setting should be unchecked in the Component Designer because there is nothing for the user to remember until the sensor gets a reading.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;basicblock&quot;&gt;RememberButton.Click&lt;/span&gt;: When the user clicks the RememberButton , the location sensor&#039;s current readings are put into the &quot;remember&quot; labels and stored to the database as well. The DirectionsButton is enabled as it now makes sense for the user click on it to see a map (though it will make more sense once the user changes location).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;basicblock&quot;&gt;DirectionsButton.Click&lt;/span&gt;: When the user clicks the DirectionsButton , the event-handler builds a URL for a map and calls ActivityStarter to launch the Maps application and load the map. &lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt; is used to build the URL to send to the Maps application. The resulting URL consists of the Maps domain along with two crucial parameters, saddr and daddr , which specify the start and destination for the directions. For this app, the saddr is set to the latitude and longitude of the current location, and the daddr is set to the latitude and longitudeo of the location that was &quot;remembered&quot; (the location of your car!).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt;: This event is always triggered when an app opens. To understand it, you have to envision the user recording the location of the car, then closing the app, then later re-opening the app. When the app re-opens, the user expects that the location remembered earlier should appear on the phone. To facilitate this, the event-handler queries the database (&lt;span class=&quot;callblock&quot;&gt;TinyDB.GetValue&lt;/span&gt;). If there is indeed a remembered address stored in the database-- the length of the stored address is greater than zero--the remembered latitude, longitude, and street addres are placed in the corresponding labels.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Variations&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Create &quot;Android, Where is Everyone?&quot;, an app that lets a group of people track each other&#039;s whereabouts. Whether your hiking or at the park, this app could help save time and even lives.&lt;/li&gt;
&lt;li&gt;Create a &quot;breadcrumb&quot; app that tracks your (phone&#039;s) whereabouts by recording each location change. One interesting refinement would be to only record a new &quot;breadcrumb&quot; if the location has changed by a certain amount.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Review&lt;/h4&gt;
&lt;p&gt;Lines and paragraphs break automatically.&lt;/p&gt;
&lt;p&gt;Here are some of the ideas covered in this tutorial:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;b&gt;LocationSensor&lt;/b&gt; component can report the phone&#039;s latitude, longitude, and current street address. Its LocationChanged event is triggered when sensor gets its first reading and when the reading changes (the phone has moved).&lt;/li&gt;
&lt;li&gt;The &lt;b&gt;ActivityStarter&lt;/b&gt; component can launch any app including Google Maps. For Maps, you set the DataUri property to the URL of the map you want to display. If you want to show directions, the URL will be of the form: &lt;a href=&quot;http://maps.google.com/maps/?saddr=0.1,0.1&amp;amp;daddr=0.2,0.2&quot;&gt;http://maps.google.com/maps/?saddr=0.1,0.1&amp;amp;daddr=0.2,0.2&lt;/a&gt;, where the numbers are GPS coordinates.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt; is used to piece together (concatenate) separate text items into a single text object. It allows you to concatenate dynamic data with static text. With the Maps URL, the GPS coordinates are the dynamic data.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;TinyDB&lt;/b&gt; allows you to store data persistently in the phone&#039;s database. Whereas the data in a variable or property is lost when an app closes, the data you store in the database can be loaded into your app each time it is opened.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;ai-box&quot;&gt;MIT and Google are grateful to &lt;a href=&quot;http://www.appinventor.org/&quot;&gt;Professor David Wolber&lt;/a&gt;, CS Professor at The University of San Francisco, for developing this tutorial.

Done with &lt;span style=&quot;color:black;&quot;&gt;Android, Where&#039;s My Car&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Data Storage&lt;/li&gt;&lt;li class=&quot;field-item odd&quot;&gt;Activity Starter&lt;/li&gt;&lt;li class=&quot;field-item even&quot;&gt;GPS&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 14 Jun 2013 16:21:22 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">322 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Google Voice for Texting over Wifi</title>
 <link>http://explore.appinventor.mit.edu/content/google-voice</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;
	
}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

}

/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;h2 class=&quot;ai-header&quot;&gt;&lt;span style=&quot;color:green;&quot;&gt;Texting Over Wifi: &lt;/span&gt;Using Google Voice&lt;/h2&gt;
&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This tutorial shows how to use the Texting component to send and receive text messages (SMS) over Wifi.   This lets&lt;br /&gt;
instructors use App Inventor texting examples and exercises with phones that do not have mobile or data plans.&lt;/p&gt;
&lt;p&gt;In order to use the Texting component over Wifi, the app user will need a &lt;a href=&quot;https://www.google.com/voice&quot;&gt;Google Voice account&lt;/a&gt; and will also need to download and install the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.apps.googlevoice&quot;&gt;Google Voice app&lt;/a&gt; from the Play Store.&lt;/p&gt;
&lt;p&gt;Once you get Google Voice set up on your phone, try the &lt;a href=&quot;http://explore.appinventor.mit.edu/content/alertme&quot;&gt;AlertMe&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Under the Hood: How Things Work&lt;/h4&gt;
&lt;p&gt;Texting over Wifi uses Google Voice to send and receive messages. The mobile Google Voice app is used for receiving messages and the user&#039;s Google Voice account is used for sending messages.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Receiving a Message:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Here are some of the internal details for how things work when a message is received.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The phone receives an incoming text message, say, &quot;Hi&quot;, from some phone, say, &quot;555-111-2222&quot;.&lt;/li&gt;
&lt;li&gt;The Android system forwards the message to the Google Voice mobile app, which has been set up to receive messages.&lt;/li&gt;
&lt;li&gt;The Google Voice app forwards the message to the Texting component&#039;s Broadcast Receiver.&lt;/li&gt;
&lt;li&gt;If the Texting component is &lt;b&gt;enabled to receive messages&lt;/b&gt;, the Broadcast Receiver forwards the message to the Texting component.&lt;/li&gt;
&lt;li&gt;If the Texting component is running (meaning it is visible in the foreground), its &lt;span class=&quot;basicblock&quot;&gt;MessageReceived&lt;/span&gt; (with the arguments &lt;span class=&quot;argblock&quot;&gt;555-111-2222&lt;/span&gt; and &lt;span class=&quot;argblock&quot;&gt;Hi&lt;/span&gt; for this example) event handler will be invoked.&lt;/li&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/googleVoiceWifiText/MessageReceivedBlock.png&quot; /&gt;&lt;/p&gt;
&lt;li&gt;The &lt;span class=&quot;basicblock&quot;&gt;MessageReceived&lt;/span&gt; method will process the message according to the algorithm specified in its do slot.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Of course most of these details are not visible to the App Inventor programmer, who just needs to worry about the procedure in the Do slot.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Sending a Message:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Here are some of the details for how things work when a message is sent.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Sending a message requires that the Texting component&#039;s &lt;span class=&quot;setblock&quot;&gt;Message&lt;/span&gt; and &lt;span class=&quot;setblock&quot;&gt;PhoneNumber&lt;/span&gt; properties have been set and that its &lt;span class=&quot;callblock&quot;&gt;SendMessage&lt;/span&gt; method has been called.&lt;/li&gt;
&lt;li&gt;If this is the first message being sent by the app, the user will be prompted to authenticate with their online Google Voice account.&lt;/li&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/googleVoiceWifiText/sendingmsg.png&quot; /&gt;&lt;/p&gt;
&lt;li&gt;Once authenticated, the &lt;span class=&quot;callblock&quot;&gt;SendMessage&lt;/span&gt; method will forward the message and phone number to Google Voice.&lt;/li&gt;
&lt;li&gt;Google Voice will forward the message to the destination phone number.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Note:  if the user sends a message to her own Google Voice number, it will be forwarded back to the phone., which&lt;br /&gt;
could be very confusing.  This may have implications for how you design your app.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Preliminaries: Logging onto Wifi&lt;/h4&gt;
&lt;p&gt;A reliable Wifi hotspot is a prerequisite to using the Texting component without a SIM card or mobile account. Use the phone&#039;s &lt;em&gt;Settings &amp;gt; Wireless &amp;amp; networks &amp;gt; Wi-Fi&lt;/em&gt; to connect to a Wifi hotspot. This may require you to login to the Wifi with a password and may also require you to login to the school&#039;s network with a username and password.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Setting Up Your Google Voice Account&lt;/h4&gt;
&lt;p&gt;The revised Texting component uses Google Voice to send outgoing messages over Wifi. In order to build and test an app that sends text messages over Wifi, the app developer will have to have a &lt;a href=&quot;https://www.google.com/voice&quot;&gt;Google Voice account&lt;/a&gt;. Once the app is developed, users of the app will also have to have Google Voice accounts.&lt;/p&gt;
&lt;p&gt;To create a Google Voice account,&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Login to your Gmail account.&lt;/li&gt;
&lt;li&gt;Click on the &lt;em&gt;More&lt;/em&gt; tab on the Google menu bar.&lt;/li&gt;
&lt;li&gt;Select the &lt;em&gt;Even More&lt;/em&gt; option.&lt;/li&gt;
&lt;li&gt;Scroll down to the &lt;em&gt;Google Voice&lt;/em&gt; link under &lt;em&gt;Home and Office/&lt;em&gt;.&lt;/em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Follow the instructions there to create a Google Voice number and activate your account.&lt;/li&gt;
&lt;/ol&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Installing the Google Voice App&lt;/h4&gt;
&lt;p&gt;The revised Texting component receives incoming messages over Wifi through the &lt;a href=&quot;http://www.google.com/mobile/voice&quot;&gt;Google Voice mobile app&lt;/a&gt;. To download and install Google voice on your phone:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Start the phone&#039;s &lt;em&gt;Market&lt;/em&gt; or &lt;em&gt;Play Store&lt;/em&gt; app.&lt;/li&gt;
&lt;li&gt;Search for &quot;Google Voice&quot;.&lt;/li&gt;
&lt;li&gt;Download and install the app.&lt;/li&gt;
&lt;li&gt;Read and approve the app&#039;s permission requests.&lt;/li&gt;
&lt;li&gt;Start the app and follow the setup instructions.&lt;/li&gt;
&lt;li&gt;Set the following Google Voice settings under &lt;em&gt;Voice &amp;gt; Sync&lt;/em&gt; and notifications:&lt;/li&gt;
&lt;li&gt;Receive text messages &amp;gt; Via the Google Voice app&lt;/li&gt;
&lt;li&gt;Text notifications &amp;gt; Off (unless you want your app and Google Voice to notify you)&lt;/li&gt;
&lt;/ol&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Authenticating Outgoing Messages&lt;/h4&gt;
&lt;p&gt;Because outgoing messages are sent through the user&#039;s (online) Google Voice account, users of Texting-over-wifi apps will be asked to give the app permission to access the user&#039;s account &lt;b&gt;now and in the future&lt;/b&gt;. If there are more than one user account on the phone, the user will first be prompted to choose an account. &lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/sites/all/files/tutorials/googleVoiceWifiText/permissionscreen.png&quot; width=&quot;200&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;/sites/all/files/tutorials/googleVoiceWifiText/authscreen.png&quot; width=&quot;200&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This description assumes that the user already has an active Google account on the phone. If not, the user will be asked to setup an account or login to an existing Google account.&lt;/p&gt;
&lt;p&gt;This authentication process will happen the first time the app sends an outgoing message after it is installed. Depending on how the app and phone are used, the user may never again be asked for permission &lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;In Summary&lt;/h4&gt;
&lt;p&gt;Congratulations! You have successfully installed Google Voice and are ready to text over Wifi! This will be useful for a variety of Apps that use texting. Now try to build &lt;a href=&quot;http://explore.appinventor.mit.edu/content/alertme&quot;&gt;AlertMe&lt;/a&gt;, an app that allows you to try this new capability.&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;Done with &lt;span style=&quot;color:black;&quot;&gt;Google Voice&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;SMS Texting&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 14 Jun 2013 16:20:49 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">321 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>No Text While Driving (Part 2)</title>
 <link>http://explore.appinventor.mit.edu/content/no-text-while-driving-part-2</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;
	
}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

.controlblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FAEDBB;
font-size: 9pt;
text-wrap: suppress;
}

/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;h2 class=&quot;ai-header&quot;&gt;&lt;span style=&quot;color:green;&quot;&gt;No Text While Driving&lt;/span&gt;, Part 2&lt;/h2&gt;
&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;p&gt;
&lt;img src=&quot;/sites/all/files/tutorials/NTWD2/emulator.png&quot; style=&quot;float:right; width:350px;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cs.usfca.edu/~wolber/appinventor/bookSplits/ch4NoTexting.pdf&quot;&gt;Download Refined Version (Book Chapter PDF)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You know that texting while driving is dangerous, so you&#039;ve created and installed the &lt;a href=&quot;http://explore.appinventor.mit.edu/content/no-text-while-driving&quot;&gt;No Text While Driving&lt;/a&gt; app on your phone. Now, when you drive you open that app and let it auto-respond to incoming texts.&lt;/p&gt;
&lt;p&gt;But the jingle of the texts coming in is killing you with curiosity-- wouldn&#039;t it be great if you could hear the texts spoken aloud? With Part II of the tutorial, you&#039;ll extend the app so that it speaks out both the message and who sent it. And since you&#039;re making some changes anyway, you&#039;ll modify the auto-response so it reports your whereabouts in the reply: &quot;Sorry, I&#039;m driving and I&#039;m at 1600 Pennsylvania Avenue&quot;. &lt;/p&gt;
&lt;p&gt;Before completing this tutorial you should complete &lt;a href=&quot;http://explore.appinventor.mit.edu/content/no-text-while-driving&quot;&gt;part I&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;For this app to work, you&#039;ll need to load a text-to-speech module, &lt;em&gt;Text-To-Speech Extended&lt;/em&gt;, on your phone. App Inventor and other apps rely on this module for the underlying voice synthesis. If you don&#039;t already have it, you can download onto your phone using the Android Market:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;On your phone, open the Market app&lt;/li&gt;
&lt;li&gt;Search for TTS&lt;/li&gt;
&lt;li&gt;Select the app &lt;em&gt;Text-To-Speech Extended&lt;/em&gt; to install&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Once the &lt;em&gt;Text-To-Speech&lt;/em&gt; module is installed, open it to test its features. When it opens, set the default language as desired. Then select &quot;Listen to Preview&quot;. If you don&#039;t hear anything, make sure the volume on your phone is turned on. You can also change the default Engine which can enhance the quality of the spoken words.&lt;/p&gt;
&lt;p&gt;Once the Text-To-Speech module is installed and configured as desired, you can use the &lt;b&gt;TextToSpeech&lt;/b&gt; component within App Inventor. Begin by opening App Inventor and your &lt;span style=&quot;color:green;&quot;&gt;NoTextWhileDriving&lt;/span&gt; project from part I. SaveAs the project and name the new copy &quot;NoTextWhileDriving2&quot;.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;What you&#039;ll Learn&lt;/h4&gt;
&lt;p&gt;The app demonstrates two powerful components:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;b&gt;LocationSensor&lt;/b&gt; component to determine the phone&#039;s location, and&lt;/li&gt;
&lt;li&gt;The &lt;b&gt;TextToSpeech&lt;/b&gt; component to speak the incoming texts aloud.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These components encapsulate some advanced functionality, but using them in building an app is relatively straight-forward.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Set up the Components&lt;/h4&gt;
&lt;p&gt;Leave the user interface for &lt;span style=&quot;color:green;&quot;&gt;NoTextWhileDriving, Part II&lt;/span&gt; the same as in Part I. But in the Component Designer, add two non-visual components: a &lt;b&gt;LocationSensor&lt;/b&gt; and a &lt;b&gt;TextToSpeech&lt;/b&gt; component. You do not need to set any properties of the components.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Add behaviors to the components&lt;/h4&gt;
&lt;p&gt;The behavior for part I of No Text While Driving was: &quot;when a text is received, the message the user has put in MessageTextbox is sent as a text message response to the sender.&quot;&lt;/p&gt;
&lt;p&gt;For part II, the behavior will be changed to: &quot;when a text is received, it is spoken aloud and a message, including the text in MessageTextbox and the phone&#039;s current location, is sent in response to the sender.&quot;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Speaking the text aloud&lt;/h4&gt;
&lt;p&gt;When a text message is received by the phone, the &lt;span class=&quot;basicblock&quot;&gt;Texting.MessageReceived&lt;/span&gt; event is triggered. The blocks from Part I handle this event by setting the PhoneNumber and Message properties of the Texting component appropriately and then sending the response text.&lt;/p&gt;
&lt;p&gt;Extend the blocks from Part I by using the TextToSpeech component to speak both the sender&#039;s phone number and the message. You&#039;ll add the following blocks to the existing &lt;span class=&quot;basicblock&quot;&gt;Texting.MessageReceived&lt;/span&gt; blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;TextToSpeech1.Speak&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;TextToSpeech1&lt;/td&gt;
&lt;td&gt;Speak out the message received&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Build the words that are to be spoken&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;message from&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;First words spoken, put a space at end&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;number&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;This is the number the original text was received from&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Put a space in between number and message&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;messageText&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;This is the original message received&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD2/MessageReceivedSpoken.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the blocks work&lt;/h4&gt;
&lt;p&gt;After the response is sent, the &lt;span class=&quot;callblock&quot;&gt;TextToSpeech1.Speak&lt;/span&gt; function is called. You can plug any text object into the message slot of the Speak function. In this case, &lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt; is used to build the words to be spoken, including the text &quot;message from&quot;, the phone number from which the message was received (number), a blank text, and the message received (messageText). If the text &quot;hello&quot; was received from the number &quot;111-2222&quot;, the words &quot;message from 111-2222. hello.&quot; would be spoken.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test the behavior.&lt;/b&gt; You&#039;ll need a second phone to test the behaviors in this app. From the second phone, send a text to the phone that is running the app. Does the second phone speak the text aloud? Does it still send an automated response?&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Adding location information to the auto-response&lt;/h4&gt;
&lt;p&gt;Next, add a &lt;span class=&quot;basicblock&quot;&gt;LocationSensor.LocationChanged&lt;/span&gt; event handler which places the current address into a variable, lastKnownLocation. When a text comes in, the value of that variable can be added to the response message. Here are the blocks you&#039;ll need:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;def variable&lt;/span&gt; (lastKnownLocation)&lt;/td&gt;
&lt;td&gt;Definitions&lt;/td&gt;
&lt;td&gt;Create a variable to hold the last read address&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;unknown&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Set the default value in case the phone&#039;s sensor is not working&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;LocationSensor1.LocationChanged&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;LocationSensor1&lt;/td&gt;
&lt;td&gt;This is triggered on the first location reading and every change&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set lastKnownLocation to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Set this variable to be used later&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;LocationSensor1.CurrentAddress&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;LocationSensor1&lt;/td&gt;
&lt;td&gt;This is a street address such as &quot;2222 Willard Street, Atlanta, Georgia&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here are the blocks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD2/lastLocation.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;basicblock&quot;&gt;LocationSensor1.LocationChanged&lt;/span&gt; is called the first time the sensor gets a reading and each time the phone is moved enough to trigger a new reading. These blocks just place the current (street) address into the variable lastKnownLocation, which you&#039;ll use later when you change the auto-response that is sent out.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Modify the message with location information&lt;/h4&gt;
&lt;p&gt;Next, modify the &lt;span class=&quot;basicblock&quot;&gt;Texting1.MessageReceived&lt;/span&gt; event-handler so that the current address is added to the response. You&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;If there is a location reading, build a compound text object&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;MessageTextBox.Text &lt;/span&gt;&lt;/td&gt;
&lt;td&gt;MessageTextBox&lt;/td&gt;
&lt;td&gt;This is the (custom) message in the text box&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; ( &quot;My location is: &quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;This will be spoken after the custom message (note the leading space)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;global lastKnownLocation&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;LocatonSensor&lt;/td&gt;
&lt;td&gt;This is an address such as &quot;2222 Willard Street, Atlanta, Georgia&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD2/ReceivedText.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;Instead of directly sending a message of the text in MessageTextbox.Text, the app first builds a message using &lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt;. It combines the response text in MessageTextBox.Text with the text &quot; My location is &quot; and then the variable lastKnownLocation.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test the behavior.&lt;/b&gt; From the second phone, send a text to the phone that is running the app. Does the second phone receive the response text? Does it include location information? &lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Final Program&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD2/finalProg.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Variations&lt;/h4&gt;
&lt;p&gt;Once you get the app working, you might want to explore some variations. For example,&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Write a version that lets the user define custom responses for particular phone numbers.&lt;/li&gt;
&lt;li&gt;Write a version that sounds an alarm when a text is received from a number in a &quot;notify&quot; list.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Review&lt;/h4&gt;
&lt;p&gt;Here are some of the ideas covered in this tutorial: &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;b&gt;TextToSpeech&lt;/b&gt; component takes any text object and speaks it aloud. It relies on an Android module, &lt;em&gt;Text-To-Speech Extended&lt;/em&gt;, which must be downloaded to the phone for the app to work.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt; is used to piece together (concatenate) separate text items into a single text object.&lt;/li&gt;
&lt;li&gt;The &lt;b&gt;LocationSensor&lt;/b&gt; component can report the phone&#039;s latitude, longitude, and current street address. To ensure that it has a reading, you should access its data in its &lt;span class=&quot;basicblock&quot;&gt;LocationChanged&lt;/span&gt; event-handler, which is triggered the first time a reading is made and on every change thereafter. &lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app.
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD2/NTWD2Barcode.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/NTWD2/notextwhiledriving2.apk&quot;&gt;download the apk&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to customize this sample in App Inventor, download the &lt;a href=&quot;/sites/all/files/tutorials/NTWD2/notextwhiledriving2.zip&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, go to the My Projects page, and choose &lt;b&gt;More Actions | Upload Source&lt;/b&gt;.&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;MIT and Google are grateful to &lt;a href=&quot;http://www.appinventor.org/&quot;&gt;Professor David Wolber&lt;/a&gt;, CS Professor at The University of San Francisco, for developing this tutorial.

Done with &lt;span style=&quot;color:black;&quot;&gt;No Text While Driving, Part 2&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;SMS Texting&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 14 Jun 2013 16:20:14 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">320 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>No Text While Driving</title>
 <link>http://explore.appinventor.mit.edu/content/no-text-while-driving</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;
	
}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

.controlblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FAEDBB;
font-size: 9pt;
text-wrap: suppress;
}

/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;h2 class=&quot;ai-header&quot;&gt;&lt;span style=&quot;color:green;&quot;&gt;No Text While Driving&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;p&gt;
&lt;img src=&quot;/sites/all/files/tutorials/NTWD/screenshot.PNG&quot; style=&quot;float:right;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cs.usfca.edu/~wolber/appinventor/bookSplits/ch4NoTexting.pdf&quot;&gt;Download Refined Version (Book Chapter PDF)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial demonstrates how an app can respond to text messages automatically. You&#039;ll build an app that sends back a response when a text message is received. The idea for the app came from University of San Franciso student Daniel Finnegan.&lt;/p&gt;
&lt;p&gt;This tutorial assumes you are familiar with the basics of App Inventor-- using the Component Designer to build a user interface, and using the Blocks Editor to specify event-handlers.If you are not familiar with the basics, try stepping through some of the &lt;a href=&quot;/tutorials&quot;&gt;basic tutorials&lt;/a&gt; before continuing.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;Connect to the App Inventor web site and start a new project. Name it &lt;span style=&quot;color:green;&quot;&gt;NoTextWhileDriving&lt;/span&gt;, and also set the screen&#039;s &lt;b style=&quot;color:green;&quot;&gt;Title&lt;/b&gt; to &quot;NoTextWhileDriving&quot;. Open the Blocks Editor and connect to the phone.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;You&#039;ll design the app so that it sends a response to any text message received. You&#039;ll also allow the user to customize the response sent.&lt;/p&gt;
&lt;p&gt;The tutorial introduces the following App Inventor concepts: &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;b&gt;Texting&lt;/b&gt; component for sending texts and processing received texts.&lt;/li&gt;
&lt;li&gt;The &lt;b&gt;TinyDB&lt;/b&gt; database component for saving the customized message even after the app is closed.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Set up the Components&lt;/h4&gt;
&lt;p&gt;The user interface for NoTextWhileDriving is simple: it has a text box for the response message and a button for submitting a change to this message. It also has two checkboxes: one to decide whether or not you want to be receiving messages and one to choose to enable  Google Voice. This is useful for texting if your phone doesn&#039;t have a SIM card. Visit the &lt;a href=&quot;http://appinventor.mit.edu/explore/content/google-voice.html&quot;&gt;Texting over Google Voice&lt;/a&gt; tutorial to learn more about this.&lt;/p&gt;
&lt;p&gt;You&#039;ll also need a Texting component and a TinyDB component, both of which will appear in the &quot;non-visual&quot; component area. A table of detailed instructions for designing the components is below, but you can also build it from the following picture of what it should look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD/fullscreen.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The components listed below were used to create the designer window shown above. Drag each component from the Palette into the Viewer and name it as specified below:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Component Type
&lt;/td&gt;
&lt;td&gt;
Palette Group
&lt;/td&gt;
&lt;td&gt;
What you&#039;ll name it
&lt;/td&gt;
&lt;td&gt;
Purpose of Component
&lt;/td&gt;
&lt;td&gt;
Component Settings
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Label&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;PromptLabel&lt;/td&gt;
&lt;td&gt;Let the user know how the app works&lt;/td&gt;
&lt;td&gt;Set the &lt;b style=&quot;color:green;&quot;&gt;Text&lt;/b&gt; to &quot;The text below will be sent in response to all texts while this app is running.&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Label&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;ResponseLabel&lt;/td&gt;
&lt;td&gt;Displays what text will be sent to incoming messages.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;TextBox&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;NewResponseTextbox&lt;/td&gt;
&lt;td&gt;User will enter custom response here&lt;/td&gt;
&lt;td&gt;Set the &lt;b style=&quot;color:green;&quot;&gt;Hint
&lt;/b&gt;&lt;p&gt; to &quot;Enter custom response.&quot;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Button&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;SubmitResponseButton&lt;/td&gt;
&lt;td&gt;User clicks this to submit new response&lt;/td&gt;
&lt;td&gt;Set the &lt;b style=&quot;color:green;&quot;&gt;text
&lt;/b&gt;&lt;p&gt; to &quot;Submit Response.&quot;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;CheckBox&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;CheckBoxReceivingEnabled&lt;/td&gt;
&lt;td&gt;Let the user choose if they want to receive messages.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;CheckBox&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;CheckBoxGvEnabled&lt;/td&gt;
&lt;td&gt;Let the user choose if they want to respond using Google Voice.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Texting&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Social&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;Texting1&lt;/td&gt;
&lt;td&gt;The component that processes the texts&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;TinyDB&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;TinyDB1&lt;/td&gt;
&lt;td&gt;The component that will store the response in the database&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Add behaviors to the components&lt;/h4&gt;
&lt;p&gt;&lt;span style=&quot;color:green;&quot;&gt;NoTextWhileDriving&lt;/span&gt; has the following behaviors:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;When a text is received, the message displayed in ResponseLabel is sent as a text message response to the sender.&lt;/li&gt;
&lt;li&gt;When the user modifies the custom message in NewResponseTextbox and clicks the SubmitResponseButton , the new message is saved persisently in the phone&#039;s database.&lt;/li&gt;
&lt;li&gt;When the app begins, the custom message is loaded from the database into ResponseLabel.&lt;/li&gt;
&lt;/ol&gt;&lt;h4 class=&quot;ai-header&quot;&gt;1. Responding to a text&lt;/h4&gt;
&lt;p&gt;When a text message is received by the phone, the &lt;span class=&quot;basicblock&quot;&gt;Texting.MessageReceived&lt;/span&gt; event is triggered. Your app should handle this event by setting the PhoneNumber and Message properties of the Texting component appropriately and sending the response text.&lt;/p&gt;
&lt;p&gt;You&#039;ll need the following blocks: &lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;Texting1.MessageReceived&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Event-handler triggered when the phone receives a text&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set Texting1.PhoneNumber to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Set the PhoneNumber property before sending &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value number&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;This is the phone number of the person who sent the text&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set Texting1.Message to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Set the Message property before sending&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;ResponseLabel.Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ResponseLabel&lt;/td&gt;
&lt;td&gt;This is the message the user has entered&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;Texting1.SendMessage &lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Send the message&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD/messagereceivedblocks.PNG&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;When the phone receives any text message, the &lt;span class=&quot;basicblock&quot;&gt;Texting1.MessageReceived&lt;/span&gt; event is triggered. The phone number of the sender is in the argument number, and the sender&#039;s message is in the argument &lt;span class-=&quot;&quot;&gt;messageText&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In response, the app sends a text message to the sender. To send a text, the app sets the two key properties of the Texting component: PhoneNumber and Message. &lt;span class=&quot;setblock&quot;&gt;Texting.PhoneNumber&lt;/span&gt; is set to the number of the sender, and &lt;span class=&quot;setblock&quot;&gt;Texting.Message&lt;/span&gt; is set to the text in &lt;span class=&quot;argblock&quot;&gt;ResponseLabel&lt;/span&gt; -- this might be the default, &quot;I&#039;m driving right now, I&#039;ll contact you shortly.&quot;, or the user may have modified it. Once these properties are set, &lt;span class=&quot;callblock&quot;&gt;Texting1.SendMessage&lt;/span&gt; is called to actually send the response text message.&lt;/p&gt;
&lt;p&gt;The &lt;span class=&quot;controlblock&quot;&gt;if&lt;/span&gt; block prevents the app from sending the automatic reply if it receives its own message. This would happen, for example, if the user is texting their own number to test the app.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test the behavior.&lt;/b&gt; You&#039;ll need a second phone to test this behavior. From the second phone, send a text to the phone that is running the app. You can &lt;a href=&quot;http://explore.appinventor.mit.edu/content/google-voice&quot;&gt;set up one phone with Google Voice&lt;/a&gt; or start two emulators to communicate with one another to test this behavior. Does the second phone receive the response text? If that works, try modifying the response message and sending another message from the second phone. Is the new response sent?&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;2. Storing the custom response&lt;/h4&gt;
&lt;p&gt;The app so far works, but if you close the app and reopen it, the custom message will be lost. To make things more convenient for the user, store the custom response message they enter into a database using the TinyDB component.&lt;/p&gt;
&lt;p&gt;TinyDB provides two blocks: StoreValue and GetValue . The former allows you to store a tagged piece of information, while the latter let&#039;s you retrieve one.&lt;/p&gt;
&lt;p&gt;You&#039;ll need the following blocks to store the custom message: &lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;SubmitResponseButton.Click&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;SubmitResponseButton&lt;/td&gt;
&lt;td&gt;User clicks this button to submit new response message&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;ResponseLabel.Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ResponseLabel&lt;/td&gt;
&lt;td&gt;Sets the response to be what the user inputs.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;NewResponseTextbox.Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;NewResponseTextbox&lt;/td&gt;
&lt;td&gt;The response message entered by the user is here&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;TinyDB1.StoreValue&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;TinyDB1&lt;/td&gt;
&lt;td&gt;Store the custom message in the phone&#039;s database&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;responseMessage&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Use this as the tag for the data&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;ResponseLabel.Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;ResponseLabel&lt;/td&gt;
&lt;td&gt;The response message entered by the user is displayed here after the user submits their new response.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD/submitresponse.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;When the user clicks the SubmitResponseButton, the app will store the response message entered by the user as the shown text that will be sent. The text in this label (&lt;span class=&quot;argblock&quot;&gt;ResponseLabel.Text&lt;/span&gt;) will be stored in TinyDB. The text &lt;span class=&quot;textblock&quot;&gt;responseMessage&lt;/span&gt; is used as a tag to uniquely identify the information-- later, you&#039;ll use that same tag to retrieve the message from the database.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;3. Retrieving the saved response message&lt;/h4&gt;
&lt;p&gt;Program the &lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt; event-handler so that the saved custom response message is retrieved from the database and placed in ResponseLabel. Check the retrieved data to make sure there&#039;s something there-- after all, the first time the app is used, the database will not have any message saved. If there is a stored message, place it in the ResponseLabel so that the user can see it and so that it will be used to respond to incoming texts.&lt;/p&gt;
&lt;p&gt;You&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;def variable&lt;/span&gt; (&quot;response&quot;)&lt;/td&gt;
&lt;td&gt;Definitions&lt;/td&gt;
&lt;td&gt;A temporary variable to hold the retrieved data &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (blank)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Initial value for the variable can be anything&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Screen1&lt;/td&gt;
&lt;td&gt;This is triggered when app begins&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;Texting1.ReceivingEnabled&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Sets the app so that it receives SMS text messages&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;number&lt;/span&gt; (3)&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;The app is initialized to receive text messages while the app is running or when it&#039;s not&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;CheckBoxGvEnabled.Checked&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;CheckBoxGvEnabled&lt;/td&gt;
&lt;td&gt;Sets status of the Google Voice Enabled checkbox&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;Texting1.GoogleVoiceEnabled&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;If Google Voice is enabled, SMS messages will be sent over Google Voice&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;if else test&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;To ask if texting should be enabled.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;not= block&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Check if the retrieved value is not equal to (=) 1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;Texting1.ReceivingEnabled&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Lets the user decide whether or not the app will received SMS messages&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;CheckBoxReceivingEnabled.Checked&lt;/span&gt;(x2)&lt;/td&gt;
&lt;td&gt;CheckBoxReceivingEnabled&lt;/td&gt;
&lt;td&gt;Sets status of the Receiving Enabled checkbox.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;true&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Logic&lt;/td&gt;
&lt;td&gt;Sets the app to receive text messages&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;false&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Logic&lt;/td&gt;
&lt;td&gt;Sets the app to not receive text messages&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set Response&lt;/span&gt;&lt;/td&gt;
&lt;td&gt; Definitions &lt;/td&gt;
&lt;td&gt;Sets the variable to the value retrieved from db.&lt;/td&gt;
&lt;/tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;TinyDB1.GetValue&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;TinyDB1&lt;/td&gt;
&lt;td&gt;Get the stored response text from the database&lt;/td&gt;

&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;responseMessage&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Plug into tag slot of GetValue, make sure text is same as was used in StoreValue above&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;if test&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;To ask if the retrieved value has some text&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;&amp;gt; block&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Check if length of retrieved value is greater than (&amp;gt;) 0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;length test&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Check if length of retrieved value is greater than 0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;global response&lt;/span&gt; (x2)&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;This variable holds the value retrieved from GetValue&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;number&lt;/span&gt; (0)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;To compare with length of response&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set ResponseLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Message&lt;/td&gt;
&lt;td&gt;If we retrieved something, place it in ResponseLabel&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD/initializeblock_update.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;When the app begins, the &lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt; event is triggered. The app calls the &lt;span class=&quot;callblock&quot;&gt;TinyDB1.GetValue&lt;/span&gt; with a tag of &lt;span class=&quot;textblock&quot;&gt;responseMessage&lt;/span&gt;-- the same tag used when you stored the user&#039;s entry earlier. The resulting value is placed in the variable &lt;span class=&quot;setblock&quot;&gt;response&lt;/span&gt;. When the app starts, we set the Texting component to have receiving enabled, but not Google Voice, which is displayed on the user interface. &lt;span class=&quot;argblock&quot;&gt;ReceivingEnabled&lt;/span&gt; takes a number value 1 (receiving disabled), 2 (receiving enabled while app is running), or 3 (receiving enabled when app is running and is not running) &lt;/p&gt;
&lt;p&gt;The variable response is used so that the value returned from the database can be checked. If it has a length of 0, then there was no database entry with a tag of &lt;span class=&quot;textblock&quot;&gt;responseMessage&lt;/span&gt;-- something that will occur the first time a user runs this app. But if the length is greater than 0, the app knows that a custom response has been stored previously, and the retrieved value can be placed in the ResponseLabel which the user will see and which is used as the message for any response texts sent. &lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test the app.&lt;/b&gt; Enter a new response message in the NewResponseTextbox and click the SubmitResponseButton. Then restart the app by clicking the Restart App button in the Blocks Editor. This will cause the app to re-initialize just like it will when a user closes the app and reopens it later. Does the custom message you entered appear?&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Selecting Response Settings&lt;/h4&gt;
&lt;p&gt;The user interface has two checkboxes that the user can toggle: whether Receiving is enabled and whether Google Voice is enabled. The first allows the user to decide whether or not they want to be receiving messages. The second lets the user decide if they want to send messages from their own phone number or from a Google Voice account. When the user toggles these switches, the changes are communicated to the Texting component which enables or disables these properties as marked.&lt;/p&gt;
&lt;p&gt;You&#039;ll need the following blocks.&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;CheckBoxGvEnabled.Changed&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;CheckBoxGvEnabled&lt;/td&gt;
&lt;td&gt;Detects if the user toggles this control.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;Texting1.GoogleVoiceEnabled&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Sets whether or not Google Voice is enabled&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;CheckBoxGvEnabled.Checked&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;CheckBoxGvEnabled&lt;/td&gt;
&lt;td&gt;Returns true or false value.&lt;/td&gt;
&lt;/tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;CheckBoxReceivingEnabled.Changed&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;CheckBoxReceivingEnabled&lt;/td&gt;
&lt;td&gt;Detects if the user toggles this control.&lt;/td&gt;

&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;if else block&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Checks whether or not receiving is enabled.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;= block&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Checks whether or not receiving is enabled.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;true&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Logic&lt;/td&gt;
&lt;td&gt;Checks whether or not receiving is enabled.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;CheckBoxReceivingEnabled.Checked&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;CheckBoxReceivingEnabled&lt;/td&gt;
&lt;td&gt;Returns true or false value.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;Texting1.ReceivingEnabled&lt;/span&gt;(x2)&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Sets whether or not receiving is enabled.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;number&lt;/span&gt;(1)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Sets ReceivingEnabled as false.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;number&lt;/span&gt;(3)&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;Sets ReceivingEnabled as true.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD/checkboxblocks_update.png&quot; /&gt;&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test the app.&lt;/b&gt; Try texting your Android device when the &quot;Receiving Enabled&quot; is checked and then when it is not checked. Do you receive texts when it is unchecked? Try texting over Google Voice. If any of these features aren&#039;t working like you expect them to, go back and look at the blocks again!&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;No Text While Driving, Final Program&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD/allblocks.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Variations&lt;/h4&gt;
&lt;p&gt;Once you get the No Text While Driving app working, you might want to explore some variations. For example,&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Write a version that speaks the received texts aloud. You&#039;ll need to use the &lt;b&gt;TextToSpeech&lt;/b&gt; component.&lt;/li&gt;
&lt;li&gt;Write a version that lets the user define custom responses for particular phone numbers.&lt;/li&gt;
&lt;li&gt;Write a version that sends custom responses based on the user&#039;s location (e.g., I&#039;m in church...)&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Review&lt;/h4&gt;
&lt;p&gt;Here are some of the ideas covered in this tutorial: &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;b&gt;Texting&lt;/b&gt; component can be used both to send text messages and process the ones that are received.&lt;/li&gt;
&lt;li&gt;The &lt;b&gt;TinyDB&lt;/b&gt; component is used to store information persistently, in the phone&#039;s database, so that it there each time the app is opened.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app.
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/NTWD/NTWDBarcode.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/NTWD/NoTextWhileDriving.apk&quot;&gt;download the apk&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to work with this sample in App Inventor, download the &lt;a href=&quot;/sites/all/files/tutorials/NTWD/NoTextWhileDriving.zip&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, go to the My Projects page, and choose &lt;b&gt;More Actions | Upload Source&lt;/b&gt;.&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;MIT and Google are grateful to &lt;a href=&quot;http://www.appinventor.org/&quot;&gt;Professor David Wolber&lt;/a&gt;, CS Professor at The University of San Francisco, for developing this tutorial.

Done with &lt;span style=&quot;color:black;&quot;&gt;No Text While Driving&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;SMS Texting&lt;/li&gt;&lt;li class=&quot;field-item odd&quot;&gt;Data Storage&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 14 Jun 2013 16:19:45 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">319 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>AlertMe</title>
 <link>http://explore.appinventor.mit.edu/content/alertme</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;
	
}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

.controlblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FAEDBB;
font-size: 9pt;
text-wrap: suppress;
}

/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;h2 class=&quot;ai-header&quot;&gt;&lt;span style=&quot;color:green;&quot;&gt;AlertMe: &lt;/span&gt;Texting in the background, when app is not running&lt;/h2&gt;
&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;p&gt;The &lt;span style=&quot;color:green;&quot;&gt;AlertMe&lt;/span&gt; app receives alert messages, and notifies the user even when the app is not currently running. If the app is running (visible on the screen), when it receives an SMS, the message will be displayed on the screen. If it&#039;s not running, the user will receive a &lt;em&gt;Notification&lt;/em&gt; in the status bar, which can be viewed by pulling down the status bar. Tapping on the notification will start the app and display the message. The user can then click the &lt;em&gt;Acknowledge&lt;/em&gt; button to send an acknowledgment to the sender that the alert has been received.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;/sites/all/files/tutorials/alertMe/notification.png&quot; width=&quot;200&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;/sites/all/files/tutorials/alertMe/notification%20bar.png&quot; width=&quot;200&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;/sites/all/files/tutorials/alertMe/alert%20me%20running.png&quot; width=&quot;200&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; align=&quot;center&quot;&gt;&lt;a href=&quot;/sites/explore.appinventor.mit.edu/files/AlertMe.zip&quot;&gt;&lt;img src=&quot;/sites/explore.appinventor.mit.edu/files/downloadSourcebutton.png&quot; style=&quot;float: center;border:none&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;pre class=&quot;ai-box&quot;&gt;&lt;strong&gt;If you are using a device that does not have regular SMS enabled through a cell phone carrier and want to do texting over the internet (IP/wifi)&lt;/strong&gt;, make sure you have a Google Voice account and you have the Google Voice app set up on your phone or tablet. For more information on how to do this, see the &lt;a href=&quot;http://explore.appinventor.mit.edu/content/google-voice&quot;&gt;Google Voice for Wifi Texting&lt;/a&gt; tutorial. When you set up the texting component in the designer, be sure you have checked the &lt;em&gt;GoogleVoiceEnabled&lt;/em&gt; property.&lt;/pre&gt;&lt;hr /&gt;&lt;h4 class=&quot;ai-header&quot;&gt;The Designer&lt;/h4&gt;
&lt;p&gt;The interface of the app is pretty simple. It displays the time, phone number, and message of each of the alerts, as well as an acknowledge button. What really drives this app is the Texting component that you will add. The components are: &lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;Component Type&lt;/td&gt;
&lt;td&gt;Palette Group&lt;/td&gt;
&lt;td&gt;What you&#039;ll name it&lt;/td&gt;
&lt;td&gt;Purpose of Component&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;Label&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td&gt;LabelHeader&lt;/td&gt;
&lt;td&gt;Displays the &quot;Alerts&quot; header.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;Label&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td&gt;LabelAlerts&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Displays the incoming messages in a log&lt;/p&gt;
&lt;p&gt;Set width and height to &lt;b&gt;Fill Parent&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;Button&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td&gt;ButtonAck&lt;/td&gt;
&lt;td&gt;Sends an achknowledgment to the alert sender.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;Clock&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td&gt;Clock1&lt;/td&gt;
&lt;td&gt;Used to generate a time stamp in the message log.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;color:green;&quot;&gt;Texting&lt;/td&gt;
&lt;td&gt;Social&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Receives and sends messages over Wifi.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Only if you are using texting over wifi through Google Voice:&lt;/em&gt; &lt;b&gt;Check the &lt;em&gt;GoogleVoiceEnabled&lt;/em&gt; property.&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;When you&#039;re done, the designer should look like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/alertMe/designer_0.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;The Blocks Editor&lt;/h4&gt;
&lt;p&gt;The blocks have to handle two events: receiving a message and sending an acknowledgment. In each of these cases, they have to know who sent the message and what it said. We&#039;ll approach each of these actions in turn.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Variables&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Since both procedures require that we know the alert message and who sent it, we will define two globalvariables: &lt;span class=&quot;setblock&quot;&gt;alertPhoneNumber&lt;/span&gt; and &lt;span class=&quot;setblock&quot;&gt;alertMessage&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/alertMe/variables.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The Message Received Block&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Incoming messages are handled by the &lt;span class=&quot;basicblock&quot;&gt;MessageReceived&lt;/span&gt; block, which takes two arguments, the &lt;span class=&quot;argblock&quot;&gt;number&lt;/span&gt; and the &lt;span class=&quot;argblock&quot;&gt;messageText&lt;/span&gt;. For this app, we store the values of these arguments in our global variables, &lt;span class=&quot;setblock&quot;&gt;alertPhoneNumber&lt;/span&gt; and &lt;span class=&quot;setblock&quot;&gt;alertMessage&lt;/span&gt; respectively, and then construct a log entry and display it on the label using &lt;span class=&quot;setblock&quot;&gt;LabelAlerts.Text&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/alertMe/AlertMeBlock.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Sending an Acknowledgment&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The user can acknowledge an alert by sending a message back to the sender. This is done using &lt;span class=&quot;basicblock&quot;&gt;ButtonAck.Click&lt;/span&gt;, which constructs the message and sends it as shown here. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/alertMe/buttonclick.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Variations&lt;/h4&gt;
&lt;p&gt;Now that you have AlertMe working, here are some variations on the program you can make.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Modify the function of the &lt;em&gt;Acknowledge&lt;/em&gt; button so you can choose to send different text, such as choosing between &quot;What&#039;s up?&quot;, &quot;On my way&quot;, and &quot;Call you later.&quot;&lt;/li&gt;
&lt;li&gt;Change the blocks so the user gets an automatically generated response (without you clicking a button). This could be a setting you could enable if you are away from your phone or in a meeting.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app.
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/alertMe/AlertMeBarcode.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/alertMe/AlertMe.apk&quot;&gt;download the apk&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to work with this sample in App Inventor, download the &lt;a href=&quot;/sites/all/files/tutorials/alertMe/AlertMe.zip&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, go to the My Projects page, and choose &lt;b&gt;More Actions | Upload Source&lt;/b&gt;.&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;Done with &lt;span style=&quot;color:black;&quot;&gt;AlertMe&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;SMS Texting&lt;/li&gt;&lt;li class=&quot;field-item odd&quot;&gt;Clock Timer&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 14 Jun 2013 16:13:33 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">318 at http://explore.appinventor.mit.edu</guid>
</item>
<item>
 <title>Broadcast Hub</title>
 <link>http://explore.appinventor.mit.edu/content/broadcasthub</link>
 <description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden view-mode-rss view-mode-rss&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot; property=&quot;content:encoded&quot;&gt;&lt;style&gt;
&lt;!--/*--&gt;&lt;![CDATA[/* &gt;&lt;!--*/

li {
padding-bottom: 7px;
}

.basicblock {
border: 1px dashed #7AA81C;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E7F2CB;
font-size: 9pt;
text-wrap: suppress;
	
}

.callblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E0D1FF;
font-size: 9pt;
text-wrap: suppress;

}

.argblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #E5E5FF;
font-size: 9pt;
text-wrap: suppress;

}

.textblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FADAA0;
font-size: 9pt;
text-wrap: suppress;

}

.setblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #C1D5F8;
font-size: 9pt;
text-wrap: suppress;
}

.controlblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FAEDBB;
font-size: 9pt;
text-wrap: suppress;
}

.listblock {
border: 1px dashed #000000;
padding-left: 4px;
padding-right: 4px;
padding-top: 1px;
padding-bottom: 1px;
background-color: #FCF5D7;
font-size: 9pt;
text-wrap: suppress;
}


/*--&gt;&lt;!]]&gt;*/
&lt;/style&gt;&lt;h2 class=&quot;ai-header&quot;&gt;&lt;span style=&quot;color:green;&quot;&gt;BroadcastHub&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;ai-classic-header&quot; style=&quot;text-align:center&quot;&gt;App Inventor Classic • App Inventor Classic • FOR APP INVENTOR 2 &lt;a href=&quot;/library&quot;&gt;CLICK HERE&lt;/a&gt;• App Inventor Classic • App Inventor Classic&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;This information pertains to App Inventor 1 (Classic). For tutorials about App Inventor 2, go to the &lt;a href=&quot;/ai2/tutorials&quot;&gt;App Inventor 2 Tutorials&lt;/a&gt;.&lt;/pre&gt;&lt;p&gt;
&lt;a href=&quot;http://cs.usfca.edu/~wolber/appinventor/bookSplits/ch11BroadcastHub.pdf&quot;&gt;Download Refined Version (Book Chapter PDF)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial, you&#039;ll write an app that automatically responds to texts messages and broadcasts texts messages it receives to a list of phone numbers.The app is inspired by &lt;a href=&quot;http://www.frontlinesms.com/&quot;&gt;FrontLineSMS&lt;/a&gt;, a tool that has been used in developing countries to &lt;a href=&quot;http://news.bbc.co.uk/2/hi/technology/8209172.stm&quot;&gt;monitor elections&lt;/a&gt;, broadcast weather changes, and in general connect people that don&#039;t have access to the web but do have phones and mobile connectivity.&lt;/p&gt;
&lt;p&gt;FrontLineSMS is software that runs on a computer with a phone plugged into it. The computer and plugged-in phone serve as a hub for SMS text communication amongst a group. You&#039;ll write a version of the software that runs on an Android phone, thus allowing the hub to be as mobile as the phones it connects.&lt;/p&gt;
&lt;p&gt;This tutorial assumes you are familiar with the basics of App Inventor-- using the Component Designer to build a user interface, and using the Blocks Editor to specify event-handlers. If you are not familiar with the basics, try stepping through some of the &lt;a href=&quot;http://explore.appinventor.mit.edu/tutorials&quot;&gt;basic tutorials&lt;/a&gt; before continuing.&lt;/p&gt;
&lt;p&gt;The tutorial also assumes you have completed the &lt;a href=&quot;http://explore.appinventor.mit.edu/content/textgroup&quot;&gt;TextGroup&lt;/a&gt; tutorial and thus are familiar with the basics of the &lt;b&gt;Texting&lt;/b&gt; component.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;Connect to the App Inventor web site and start a new project. Name it &lt;span style=&quot;color:green;&quot;&gt;BroadcastHub&lt;/span&gt;, and also set the screen&#039;s &lt;b style=&quot;color:green;&quot;&gt;Title&lt;/b&gt; to &quot;BroadcastHub&quot;. Open the Blocks Editor and connect to the phone.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;BroadcastHub processes text messages that are received in the following manner: &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If the text message is from an unknown source, the app responds with a text that invites that source to join the broadcast list.&lt;/li&gt;
&lt;li&gt;If the text message “joinabc” is received, the app adds the sender to the broadcast list.&lt;/li&gt;
&lt;li&gt;If the text message is from a number already in the broadcast list, the message is broadcast to all numbers in the list.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The tutorial covers the following App Inventor concepts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;b&gt;Texting&lt;/b&gt; component for sending texts and processing received texts.&lt;/li&gt;
&lt;li&gt;List variables to keep track of the numbers to text.&lt;/li&gt;
&lt;li&gt;The &lt;span class=&quot;basicblock&quot;&gt;Clock.Timer&lt;/span&gt; block that is used to cause an app to repeat operations on a list of data (the list of phone numbers) each time the Timer goes off&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Setting up the Components&lt;/h4&gt;
&lt;p&gt;BroadcasterHub facilitates communication between mobile phones. Those phones need not have the BroadcasterHub app installed, or even be smart phones. The app is the hub, and the app&#039;s user interface is only for the administrator of the communications network.&lt;/p&gt;
&lt;p&gt;For this sample, that user interface is simple: it will display the current &lt;em&gt;broadcast list&lt;/em&gt; -- the list of phone numbers which have registered for the service-- and it will report all texts it receives and broadcasts.&lt;/p&gt;
&lt;p&gt;To build the interface, add the following components:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Component Type
&lt;/td&gt;
&lt;td&gt;
Palette Group
&lt;/td&gt;
&lt;td&gt;
What you&#039;ll name it
&lt;/td&gt;
&lt;td&gt;
Purpose of Component
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Label&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;BroadcastListLabel&lt;/td&gt;
&lt;td&gt;This will display the phone numbers that are registered.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Label&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;LogLabel&lt;/td&gt;
&lt;td&gt;This will display a log of the texts received and broadcast.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;Texting&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Social&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;Texting1&lt;/td&gt;
&lt;td&gt;The component that processes the texts&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;b&gt;TinyDB&lt;/b&gt;
&lt;/td&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td style=&quot;color:green;&quot;&gt;TinyDB1&lt;/td&gt;
&lt;td&gt;To store the list of registered phone numbers&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;Set the &lt;b style=&quot;color:green;&quot;&gt;Width&lt;/b&gt; of each of the labels to &quot;Fill Parent&quot; so that they span the phone horizontally. Set the &lt;b style=&quot;color:green;&quot;&gt;Height&lt;/b&gt; for the labels to 200 pixels.&lt;/li&gt;
&lt;li&gt;Set the &lt;b style=&quot;color:green;&quot;&gt;Text&lt;/b&gt; property of BroadcastListLabel to &quot;Broadcast List...&quot;.&lt;/li&gt;
&lt;li&gt;Set the &lt;b style=&quot;color:green;&quot;&gt;Text&lt;/b&gt; property of LogLabel to blank.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;BroadcastHub should look like this after its front-end is designed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/broadcasterDesigner.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Add behaviors to the components&lt;/h4&gt;
&lt;p&gt;The activity for Broadcast Hub is not triggered by the user entering information or clicking a button, but by texts being received from outside sources. You&#039;ll need the following behaviors:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;When the text message is from an unknown source, the app responds with a text that invites that source to join the broadcast list.&lt;/li&gt;
&lt;li&gt;When the text message &quot;joinabc&quot; is received, register the sender as part of the broadcast list.&lt;/li&gt;
&lt;li&gt;When the text message is from a number already in the broadcast list, the message is broadcast to all numbers in the list.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Start by creating the first behavior-- when you receive a text, send a message back to the sender inviting them to text a code, &quot;joinabc&quot;, in order to register for the group. You&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;Texting1.MessageReceived&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Event-handler triggered when the phone receives a text&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set Texting1.PhoneNumber to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;To set the number for the return text&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value number&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Argument of &lt;span class=&quot;basicblock&quot;&gt;MessageReceived&lt;/span&gt;, it is the phone number of sender &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set Texting1.Message&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;To set the invite message to send&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;The invite message&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;Texting1.SendMessage&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Send it!&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/messageRcvd1.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;basicblock&quot;&gt;Texting1.MessageReceived&lt;/span&gt; is triggered when any text message is received on the phone. The blocks within the event-handler set the PhoneNumber and Message of the Texting1 component, then send the message.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test the behavior.&lt;/b&gt; You&#039;ll need another phone besides the one on which the app resides. From the second phone, send a text &quot;hello&quot; to the phone running the app. The second phone should receive a text that invites them to the group.&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Handling the &quot;joinabc&quot; text message&lt;/h4&gt;
&lt;p&gt;Create the blocks for the second behavior: &quot;when the text message &quot;joinabc&quot; is received, add the sender to the broadcast list.&quot; First, you&#039;ll need to define a list variable, BroadcastList, to store the phone numbers that register. From Definitions, drag out a def var block and name it &quot;BroadcastList&quot;. Initialize it with a make a list block from Lists:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/BroadcastList.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Next, modify the &lt;span class=&quot;basicblock&quot;&gt;Texting1.MessageReceived&lt;/span&gt; event-handler so that it adds the sender&#039;s phone number to the BroadcastList if the message received is &quot;joinabc&quot;. After you add the number to the list, display the new list in the BroadcastListLabel. You&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;ifelse&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Depending on message received, you&#039;ll do different things&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;= block&lt;/td&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;The test will be: is messageText equal to &quot;joinabc&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argnumber&quot;&gt;value messageText&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Plug into = block&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;joinabc&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Plug into = block&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock&quot;&gt;add items to list&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;To add the sender&#039;s number to BroadcastList&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;BroadcastList&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;The list&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value number&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Plug in as item of &lt;span class=&quot;listblock&quot;&gt;add items to list&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set BroadcastListLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;BroadcastListLabel&lt;/td&gt;
&lt;td&gt;Display the new list&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;BroadcastList&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Plug in to &lt;span class=&quot;setblock&quot;&gt;set BroadcastListLabel.Text to&lt;/span&gt; block&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set Texting1.Message to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;Prepare Texting1 to send message back to sender&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;congrats, you ...&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Congratulate sender for joining group&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/addtolist.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;The first row of blocks sets Texting1.PhoneNumber to the phone number of the message that was just received. The app then asks if the messageText was of the special code &quot;joinabc&quot;. If so, the sender&#039;s phone number is added to the BroadcastList, and a congratulations message is sent. If the messageText is something other than &quot;joinabc&quot;, the reply message is just the invitation message from before. After the &lt;span class=&quot;controlblock&quot;&gt;ifelse&lt;/span&gt; block, the reply message is sent (bottom row).&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test this behavior.&lt;/b&gt; From a second phone, send the text message &quot;joinabc&quot; to the phone on which the app is running. Do you recieve the correct reply? Try sending a different text message as well to check if the ifelse is working correctly.&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Broadcasting Messages&lt;/h4&gt;
&lt;p&gt;Next, you&#039;ll add the behavior so that the app broadcasts messages to the numbers in BroadcastList, if the message arrives from a number in BroadcastList. You&#039;ll need an additional &lt;span class=&quot;controlblock&quot;&gt;ifelse&lt;/span&gt; block to check if the number is in the list, and a &lt;span class=&quot;basicblock&quot;&gt;Clock.Timer&lt;/span&gt; block to broadcast the message to each item in the list. Here are all the blocks you&#039;ll need:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;ifelse&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Depending on whether sender is already in list, you&#039;ll do different things&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;listblock&quot;&gt;is in list?&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;Checks to see if something is in a list&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;global BroadcastList&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Plug into list slot of is in list?&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value number&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Plug into list slot of is in list?&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;Clock.Timer&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Blocks&lt;/td&gt;
&lt;td&gt;To repeatedly send out message to all in list&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;global BroadcastList&lt;/span&gt; x2&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Plug into list slot of &lt;span class=&quot;controlblock&quot;&gt;select list item&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set Texting1.Message to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;To set the message&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value messageText&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;The message that was received and to be broadcast&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set Texting1.Message to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Texting1&lt;/td&gt;
&lt;td&gt;To set the phone number&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;set Clock.TimerEnabled&lt;/span&gt; x2&lt;/td&gt;
&lt;td&gt;Clock1&lt;/td&gt;
&lt;td&gt;To turn the timer on/off&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;basicblock&quot;&gt;set nTicks&lt;/span&gt; x2&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Sets the value of nTicks&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;select list item&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;To grab an item from the list&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/textingreceived.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;We&#039;ve just set up a &lt;span class=&quot;controlblock&quot;&gt;timer&lt;/span&gt; to send a text message to each number in the list, BroadcastList. &lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;A &lt;span class=&quot;controlblock&quot; style=&quot;color;black;&quot;&gt;timer&lt;/span&gt; performs some action each time the clock ticks. To control the timer, define a global variable named &lt;b&gt;nTicks&lt;/b&gt;. We will set this variable initially to the number of phone numbers in the list.  And then we will subtract 1 from the variable each time we send a message. 

A &lt;span class=&quot;controlblock&quot; style=&quot;color;black;&quot;&gt;timer&lt;/span&gt; is done in two parts.  In &lt;span class=&quot;basicblock&quot;&gt;TextingMessage1.Received&lt;/span&gt; we will no longer send the message. Instead, we will initialize the global &lt;span class=&quot;controlblock&quot;&gt;nTicks&lt;/span&gt; variable to the length of the &lt;span class=&quot;controlblock&quot;&gt;BroadcastList&lt;/span&gt; list.  And we will enable the &lt;span class=&quot;controlblock&quot;&gt;Clock1&lt;/span&gt;.

The second part is done using a &lt;span class=&quot;controlblock&quot;&gt;Clock1.Timer&lt;/span&gt; block. This block will contain the &lt;span class=&quot;controlblock&quot;&gt;Texting1.SendMessage&lt;/span&gt; command. Each time the clock ticks the following steps will be performed:
&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Select a number from the &lt;span class=&quot;controlblock&quot;&gt;phoneNumbers&lt;/span&gt; list using the &lt;span class=&quot;controlblock&quot;&gt;nTicks&lt;/span&gt; as the index.&lt;/li&gt;
&lt;li&gt;Set the &lt;span class=&quot;controlblock&quot;&gt;Texting1.PhoneNumber&lt;/span&gt; to the selected number.&lt;/li&gt;
&lt;li&gt;Send the text message using &lt;span class=&quot;controlblock&quot;&gt;Texting1.SendMessage&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Subtract 1 from the &lt;span class=&quot;controlblock&quot;&gt;nTicks&lt;/span&gt; variable.&lt;/li&gt;
&lt;li&gt;If the  &lt;span class=&quot;controlblock&quot;&gt;nTicks&lt;/span&gt; is less than or equal to 0, disable the clock&lt;/li&gt;.  This will stop the timer.
&lt;/ul&gt;&lt;p&gt;The behavior is complex enough that it requires a &quot;nested&quot; &lt;span class=&quot;controlblock&quot;&gt;ifelse&lt;/span&gt; block. If the phone number of the received message is already in the list, the &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt; block is executed and the message relayed to all in the list. If the number is not in the list, the outer else-do clause is executed, and it asks another question, which is the test of the nested &lt;span class=&quot;controlblock&quot;&gt;ifelse&lt;/span&gt; block: is the messageText equal to &quot;joinabc&quot;. The app then branches one of two ways based on the answer.&lt;/p&gt;
&lt;p&gt;In general, &lt;span class=&quot;controlblock&quot;&gt;if&lt;/span&gt; and &lt;span class=&quot;controlblock&quot;&gt;ifelse&lt;/span&gt; blocks can be nested to arbitrary levels, giving you the power to program arbitrarily complex behaviors.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test this behavior.&lt;/b&gt; First, have two different phones register with the app by texting &quot;joinabc&quot; to the phone which is running the app.Then text another message from one of the phones. Both phones should receive the text.&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Logging the broadcasted texts&lt;/h4&gt;
&lt;p&gt;When a text is received and broadcast out to the other phones, the app should log that occurrence to the app so the administrator can monitor the activity. Earlier, you added the label LogLabel to the user interface for this purpose. Now, you&#039;ll code some blocks that change LogLabel each time a new text arrives.&lt;/p&gt;
&lt;p&gt;You need to build a text that says something like &quot;message from 111-2222 broadcast&quot;. The 111-2222 is not fixed data, but is the value of the variable number that comes with the MessageReceived event. So to build the text, you&#039;ll concatenate the first part &quot;message from&quot; with the variable number and finally with the last part of the message, the text &quot;broadcast&quot;.&lt;/p&gt;
&lt;p&gt;There are two functions in the Text drawer to build text. One is the join function, which joins two pieces of text. Another function, &lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt;, is also available and more convenient to use than join when you have more than two parts. You&#039;ll use it for this behavior. Here are all the blocks you&#039;ll need:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set LogLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;LogLabel&lt;/td&gt;
&lt;td&gt;Display the log here&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Build a text object out of multiple parts&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;message from&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Report message&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value number&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;The number of the sender&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;broadcast\n&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Text is &quot;message from 111-2222 broadcast&quot; with newline&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;LogLabel.Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;LogLabel&lt;/td&gt;
&lt;td&gt;Add new log to the previous ones&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The blocks should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/broadcastit.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;After broadcasting the message to all the numbers in BroadcastList , the app now modifies the LogLabel to include a report of the just broadcasted text. If the sender&#039;s number (value number) is &quot;1112222&quot;, then the &lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt; will build the text object:&lt;/p&gt;
&lt;p&gt;message from: 1112222 broadcast&lt;/p&gt;
&lt;p&gt;along with the log reports that were already in LogLabel.Text from previously received texts. The &quot;\n&quot; is the newline character that causes the old reports to be displayed on the next line, e.g.,&lt;/p&gt;
&lt;p&gt;message from: 1112222 broadcast&lt;br /&gt;
message from: 555-6666 broadcast&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Storing the BroadcastList in a Database&lt;/h4&gt;
&lt;p&gt;As is, the app works, but every time you close the app the BroadcastList will be lost and everyone would have to re-register. To fix this, you&#039;ll use the &lt;b&gt;TinyDB&lt;/b&gt; component to store and retrieve the BroadcastList to and from a database. TinyDB allows you to store data persistently-- even if the app is closed, the next time you open the app the data will be there. &lt;/p&gt;
&lt;p&gt;The general scheme for storing data persistently is the following: When the app begins, load the list from the database into a variable (e.g., BroadcastList ). Then, each time a new item is added to the list, update the database version of the list. &lt;/p&gt;
&lt;p&gt;Start by coding the blocks to store the list in the database. With the TinyDB component, a tag is used to identify the data and distinguish it from other data stored in the database. In this case, you can tag the data as &quot;broadcastList&quot;. Do the following: &lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Drag out a &lt;span class=&quot;callblock&quot;&gt;TinyDB1.StoreValue&lt;/span&gt; block from the TinyDB1 drawer.&lt;/li&gt;
&lt;li&gt;Create a &lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; block and give it the text &quot;broadcastList&quot;. Place this text block as the tag of StoreValue.&lt;/li&gt;
&lt;li&gt;Drag out a reference to BroadcastList from My Definitions . Place it as the value argument of StoreValue.&lt;/li&gt;
&lt;li&gt;Place the StoreValue block right below the blocks that add an item to the BroadcastList.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The bottom part of the modified &lt;span class=&quot;basicblock&quot;&gt;Texting1.MessageReceived&lt;/span&gt; event-handler should look like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/storeBroadcastList.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;callblock&quot;&gt;TinyDB1.StoreValue&lt;/span&gt; stores the data in BroadcastList to a database with a tag that you can later use to retrieve the data into your app. In this case, the tag is the text, &quot;broadcastList&quot;, and he value is the actual list BroadcastList.&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Loading the BroadcastList from a Database&lt;/h4&gt;
&lt;p&gt;Now add the blocks for loading the list back in each time the app begins. When the app begins, the &lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt; event is triggered, so your blocks will go in that event-handler. You’ll call &lt;span class=&quot;callblock&quot;&gt;TinyDB.GetValue&lt;/span&gt;, using the same tag you used to store the list (“broadcastList”). Check if the returned value is a list, because it won’t be if there isn’t any data in the list yet.&lt;/p&gt;
&lt;p&gt;The blocks should look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/getValue.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;The blocks first define a variable, valueFromDB, which is used to temporarily store the data returned from the database. When the app begins, the &lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt; event is triggered. &lt;span class=&quot;callblock&quot;&gt;TinyDB.GetValue&lt;/span&gt; is called, and the data from the database is placed in valueFromDB.&lt;/p&gt;
&lt;p&gt;The variable is then checked to see if it is a list. If it is not, that means there was no data for the tag “broadcastList” in the database, and an empty text has been returned. This will happen the first time a user opens the app.&lt;/p&gt;
&lt;p&gt;If valueFromDB is a list, the list is placed into the variable BroadcastList and the list is displayed.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test this behavior.&lt;/b&gt; Choose &lt;b&gt;Restart App&lt;/b&gt; which will trigger the &lt;span class=&quot;basicblock&quot; style=&quot;color:black;&quot;&gt;Screen1.Initialize&lt;/span&gt;. Do the numbers registered earlier appear?&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Display BroadcastList with each number on separate lines&lt;/h4&gt;
&lt;p&gt;Create a procedure &lt;span class=&quot;callblock&quot;&gt;displayBroadcastList&lt;/span&gt;, which displays the list with each phone number on a separate line. Be sure and call the procedure from below the &lt;span class=&quot;listblock&quot;&gt;add items to list&lt;/span&gt; block so that the updated list is displayed.&lt;/p&gt;
&lt;p&gt;For help displaying the list on separate lines, see &lt;a href=&quot;/content/displaying-list&quot;&gt;Displaying a List&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You&#039;ll need the following blocks:&lt;/p&gt;
&lt;table&gt;&lt;tr style=&quot;background-color: #EFEFEF; font-weight: bold;&quot;&gt;&lt;td&gt;
Block type
&lt;/td&gt;
&lt;td&gt;
Drawer
&lt;/td&gt;
&lt;td&gt;
Purpose
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;callblock&quot;&gt;procedure&lt;/span&gt; (&quot;displayBroadcastList&quot;)&lt;/td&gt;
&lt;td&gt;Definitions&lt;/td&gt;
&lt;td&gt;Create the procedure&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set BroadcastListLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;BroadcastListLabel&lt;/td&gt;
&lt;td&gt;Display the list here&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;Phone Numbers...&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;The header for the list&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Iterate through the numbers&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;name pnumber&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;in the &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Name the &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt; variable &quot;pnumber&quot;. This is the current item of the &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;BroadcastList&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;Plug into in list slot of &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;setblock&quot;&gt;set BroadcastListLabel.Text to&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;BroadcastListLabel&lt;/td&gt;
&lt;td&gt;Modify with each of the numbers&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Build a text object from multiple parts&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;BroadcastListLabel.Text&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;BroadcastListLabel&lt;/td&gt;
&lt;td&gt;Add to the label on each iteration of &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;textblock&quot;&gt;text&lt;/span&gt; (&quot;\n&quot;)&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Newline character so that next number is on next line&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;argblock&quot;&gt;value pnumber&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;My Definitions&lt;/td&gt;
&lt;td&gt;The current number from the list&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The &lt;span class=&quot;callblock&quot;&gt;displayBroadcastList&lt;/span&gt; procedure should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/displayBroadcastList.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;How the Blocks Work&lt;/h4&gt;
&lt;p&gt;The &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt; in &lt;span class=&quot;callblock&quot;&gt;displayBroadcastList&lt;/span&gt; successively adds a phone number to the end of the label, placing a newline character in between each item.&lt;/p&gt;
&lt;p&gt;Of course this procedure will not do anything unless you call it: you should add two calls to the procedure: one within the &lt;span class=&quot;basicblock&quot;&gt;Texting1.MessageReceived&lt;/span&gt; event-handler, and one within the &lt;span class=&quot;basicblock&quot;&gt;Screen1.Initialize&lt;/span&gt; event-handler. The call &lt;span class=&quot;callblock&quot;&gt;displayBroadcastList&lt;/span&gt; block can be found in My Definitions, and it should replace the blocks that directly set the BroadcastListLabel.Text to the list. You can see how these calls to &lt;span class=&quot;callblock&quot;&gt;displayBroadcastList&lt;/span&gt; should look in the snapshot of the final version below.&lt;/p&gt;
&lt;pre class=&quot;ai-testing&quot;&gt;&lt;b&gt;Test this behavior.&lt;/b&gt; Try adding some more phone numbers to the list. Do the registered phone numbers now appear on separate lines?&lt;/pre&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Broadcast Hub, Final Version&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/allBlocks.png&quot; /&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Variations&lt;/h4&gt;
&lt;p&gt;Once you get the Broadcast Hub app working, you might want to explore some variations. For example,&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Allow client phones to remove themselves from the list by texting &quot;quitabc&quot; to the app.&lt;/li&gt;
&lt;li&gt;Let the hub administrator (the user of your app) add and remove numbers from the broadcast list.&lt;/li&gt;
&lt;li&gt;Let the hub administrator specify numbers that should not be allowed into the list.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Review&lt;/h4&gt;
&lt;p&gt;Here are some of the ideas covered in this tutorial: &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Apps can react to events, like a text being received, that are not initiated by the user of the app.&lt;/li&gt;
&lt;li&gt;Nested &lt;span class=&quot;controlblock&quot;&gt;ifelse&lt;/span&gt; and &lt;span class=&quot;controlblock&quot;&gt;foreach&lt;/span&gt; blocks can be used to code complex behaviors.&lt;/li&gt;
&lt;li&gt;The &lt;span class=&quot;textblock&quot;&gt;make text&lt;/span&gt; block can be used to build a text object out of multiple parts.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;TinyDB&lt;/b&gt; can be used to store and retrieve data from a database. A general scheme is to call &lt;span class=&quot;callblock&quot;&gt;StoreValue&lt;/span&gt; to update the database whenever the data changes, and call &lt;span class=&quot;callblock&quot;&gt;GetValue&lt;/span&gt; to retrieve the database data when the app begins.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;ai-header&quot;&gt;Scan the Sample App to your Phone&lt;/h4&gt;
&lt;p&gt;Scan the following barcode onto your phone to install and run the sample app.
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/sites/all/files/tutorials/broadcastHub/broadcastHubBarcode.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/broadcastHub/broadcastHub.apk&quot;&gt;download the apk&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&quot;ai-header&quot;&gt;Download Source Code&lt;/h4&gt;
&lt;p&gt;If you&#039;d like to work with this sample in App Inventor, download the &lt;a href=&quot;http://explore.appinventor.mit.edu/sites/all/files/tutorials/broadcastHub/broadcastHub.zip&quot;&gt;source code&lt;/a&gt; to your computer, then open App Inventor, go to the My Projects page, and choose &lt;b&gt;More Actions | Upload Source&lt;/b&gt;.&lt;/p&gt;
&lt;pre class=&quot;ai-box&quot;&gt;MIT and Google are grateful to &lt;a href=&quot;http://www.appinventor.org/&quot;&gt;Professor David Wolber&lt;/a&gt;, CS Professor at The University of San Francisco, for developing this tutorial.

Done with &lt;span style=&quot;color:black;&quot;&gt;BroadcastHub&lt;/span&gt;? Return to the other tutorials &lt;a href=&quot;http://explore.appinventor.mit.edu/tutorials&quot;&gt;here&lt;/a&gt;.&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section class=&quot;field field-name-field-version field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Version:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;&lt;a href=&quot;/tutorial-version/app-inventor-1&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;App Inventor 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-difficulty field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Difficulty:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;Advanced&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section class=&quot;field field-name-field-tutorial-type field-type-taxonomy-term-reference field-label-above view-mode-rss view-mode-rss&quot;&gt;&lt;h2 class=&quot;field-label&quot;&gt;Tutorial Type:&amp;nbsp;&lt;/h2&gt;&lt;ul class=&quot;field-items&quot;&gt;&lt;li class=&quot;field-item even&quot;&gt;SMS Texting&lt;/li&gt;&lt;li class=&quot;field-item odd&quot;&gt;Data Storage&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;</description>
 <pubDate>Fri, 14 Jun 2013 16:13:05 +0000</pubDate>
 <dc:creator>aaron</dc:creator>
 <guid isPermaLink="false">317 at http://explore.appinventor.mit.edu</guid>
</item>
</channel>
</rss>
